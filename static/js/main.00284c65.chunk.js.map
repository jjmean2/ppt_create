{"version":3,"sources":["api/CSRFToken.tsx","parser/SongParser.ts","parser/LineParser.ts","parser/LyricParser.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["axios","defaults","xsrfCookieName","xsrfHeaderName","CSRFToken","SlideConvertMethod","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","replace","substring","decodeURIComponent","getCookie","type","value","splitArrayBySize","array","size","result","element","last","push","convertBodyToSlide","body","lineSize","tag","lines","map","join","LineCategory","SongParser","songParts","currentTag","title","flow","linkUrl","bodys","tagBodyMap","Map","bodysWithNoTag","comments","part","category","undefined","this","logDiscard","toUpperCase","console","error","slice","lastBody","concat","comment","filter","$0","log","flatMap","lineJoiner","Array","toSlideBodyOrder","flowTokens","splitAsTokens","usedTokens","slidesFromFlowTokens","token","taggedBody","get","slidesFromUnusedTaggedBodys","includes","slidesFromUntaggedBodys","method","withFlowOrder","toSlideFlowOrder","withBodyOrder","tagPatterns","flowTokenPatterns","isFlowToken","arg","some","pattern","test","separatorPatterns","scoreRange","titleSections","categoryScorer","empty","text","date","score","tokens","Math","ceil","separator","Line","inferedCategory","categories","$enum","getValues","reduce","current","checker","unknown","LineParser","songsCache","done","trim","lastLine","getKeyOrDefault","getSongParts","songs","startIndexOfSong","processedLineIndex","from","entries","currentIndex","currentPart","previousParts","isCompleteSong","firstBodyIndexAfterThis","findIndex","Number","MAX_SAFE_INTEGER","categoriesInTitleSection","remainingParts","forEach","line","index","start","end","convertSlideToFormText","slide","convertSongSlidesToFormText","slides","LyricParser","lineParser","songParsers","toSlides","App","formRef","useRef","textAreaRef","hiddenBodyRef","filenameRef","className","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","ref","action","onClick","formText","toFormText","today","Date","distanceToSunday","getDay","nextSunday","addDays","format","getFilename","submit","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.00284c65.chunk.js","sourcesContent":["import React, { ReactElement } from \"react\";\nimport axios from \"axios\";\n\naxios.defaults.xsrfCookieName = \"csrftoken\";\naxios.defaults.xsrfHeaderName = \"X-CSRFToken\";\n\nfunction getCookie(name: string): string | null {\n  var cookieValue = null;\n  if (document.cookie && document.cookie !== \"\") {\n    var cookies = document.cookie.split(\";\");\n    for (var i = 0; i < cookies.length; i++) {\n      var cookie = cookies[i].replace(\" \", \"\");\n      //var cookie = jQuery.trim(cookies[i]); 당신이 만약 jQuery를 사용한다면, 위 코드 대신 이 코드를 사용하여도 좋다\n      if (cookie.substring(0, name.length + 1) === name + \"=\") {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n  return cookieValue;\n}\nfunction CSRFToken(): ReactElement {\n  const csrftoken = getCookie(\"csrftoken\");\n  return (\n    <input type=\"hidden\" name=\"csrfmiddlewaretoken\" value={csrftoken ?? \"\"} />\n  );\n}\n\nexport default CSRFToken;\n","import { LineCategory, splitAsTokens } from \"./LineParser\";\n\nfunction splitArrayBySize<T>(array: T[], size: number): T[][] {\n  const result = [] as T[][];\n  for (const element of array) {\n    const last = result[result.length - 1];\n    if (last && last.length < size) {\n      last.push(element);\n    } else {\n      result.push([element]);\n    }\n  }\n  return result;\n}\n\nfunction convertBodyToSlide(body: Body, lineSize = 2): Slide[] {\n  const { tag, lines } = body;\n  return splitArrayBySize(lines, lineSize).map((lines) => ({\n    tag: tag,\n    body: lines.join(\"\\n\"),\n  }));\n}\n\nexport type SongPart = {\n  start: number;\n  end: number;\n  category: LineCategory;\n  lines: string[];\n};\n\nexport type Body = {\n  tag?: string;\n  lines: string[];\n};\n\nexport enum SlideConvertMethod {\n  withFlowOrder,\n  withBodyOrder,\n}\n\nexport type Slide = {\n  tag?: string;\n  body: string;\n};\n\nexport class SongParser {\n  title?: string;\n  flow?: string;\n  linkUrl?: string;\n  bodys: Body[] = [];\n  tagBodyMap = new Map<string, Body>();\n  bodysWithNoTag: Body[] = [];\n  comments: string[] = [];\n\n  private logDiscard(\n    type: string,\n    part: SongPart | string[],\n    lineJoiner = \"\\n\"\n  ) {\n    if (part instanceof Array) {\n      console.error(`${type} part (${part}) is discarded`);\n    } else {\n      console.error(\n        `${type} part (${part.lines.join(lineJoiner)}) is discarded`\n      );\n    }\n  }\n\n  constructor(public songParts: SongPart[]) {\n    let currentTag: string | undefined;\n    for (const part of songParts) {\n      if (part.category === LineCategory.title) {\n        currentTag = undefined;\n        if (this.title === undefined) {\n          this.title = part.lines.join(\"\\n\");\n        } else {\n          this.logDiscard(\"title\", part);\n        }\n      }\n      if (part.category === LineCategory.flow) {\n        currentTag = undefined;\n        if (this.flow === undefined) {\n          this.flow = part.lines.join(\" \");\n        } else {\n          this.logDiscard(\"flow\", part, \" \");\n        }\n      }\n      if (part.category === LineCategory.linkUrl) {\n        currentTag = undefined;\n        if (this.linkUrl === undefined) {\n          this.linkUrl = part.lines.join(\"\\n\");\n        } else {\n          this.logDiscard(\"linkUrl\", part);\n        }\n      }\n      if (part.category === LineCategory.tag) {\n        currentTag = part.lines[0].toUpperCase() || undefined;\n        console.error(\"set current tag\", currentTag);\n        if (part.lines.length > 1) {\n          this.logDiscard(\"tag\", part.lines.slice(1), \", \");\n        }\n      }\n      if (part.category === LineCategory.body) {\n        console.error(\"current tag for body\", currentTag);\n        const lastBody = this.bodys[this.bodys.length - 1];\n        if (lastBody && currentTag && lastBody.tag === currentTag) {\n          lastBody.lines = lastBody.lines.concat(part.lines);\n        } else {\n          this.bodys.push({ tag: currentTag, lines: part.lines });\n        }\n      }\n      if (part.category === LineCategory.comment) {\n        this.comments.push(part.lines.join(\"\\n\"));\n      }\n    }\n\n    this.bodysWithNoTag = this.bodys.filter(($0) => $0.tag === undefined);\n    console.log(\"bodysWith NoTAg\", this.bodysWithNoTag);\n    this.tagBodyMap = new Map(\n      this.bodys\n        .flatMap(({ tag, lines }) => (tag ? [{ tag, lines }] : []))\n        .map(($0) => [$0.tag, $0])\n    );\n  }\n\n  toSlideBodyOrder(): Slide[] {\n    return this.bodys.flatMap(($0) => convertBodyToSlide($0));\n  }\n\n  toSlideFlowOrder(): Slide[] {\n    if (this.flow === undefined) {\n      return this.toSlideBodyOrder();\n    }\n    const flowTokens = splitAsTokens(this.flow).map(($0) => $0.toUpperCase());\n    const usedTokens = [] as string[];\n    const bodys = flowTokens.map((token) => {\n      if (token) {\n        const taggedBody = this.tagBodyMap.get(token);\n        if (taggedBody) {\n          usedTokens.push(token);\n          return taggedBody;\n        }\n      }\n      return token;\n    });\n    const slidesFromFlowTokens: Slide[] = bodys.flatMap((body) => {\n      if (typeof body === \"string\") {\n        return [{ tag: body, body: \"\" }];\n      } else {\n        return convertBodyToSlide(body);\n      }\n    });\n    const slidesFromUnusedTaggedBodys = this.bodys\n      .filter(($0) => $0.tag && !usedTokens.includes($0.tag))\n      .flatMap(($0) => convertBodyToSlide($0));\n    const slidesFromUntaggedBodys = this.bodysWithNoTag.flatMap(($0) =>\n      convertBodyToSlide($0)\n    );\n    return slidesFromFlowTokens\n      .concat(slidesFromUnusedTaggedBodys)\n      .concat(slidesFromUntaggedBodys);\n  }\n\n  toSlides(\n    method: SlideConvertMethod = SlideConvertMethod.withFlowOrder\n  ): Slide[] {\n    switch (method) {\n      case SlideConvertMethod.withFlowOrder:\n        return this.toSlideFlowOrder();\n      case SlideConvertMethod.withBodyOrder:\n        return this.toSlideBodyOrder();\n      default:\n        return this.toSlideBodyOrder();\n    }\n  }\n\n  toString(): string {\n    return `\n\t\t\t* title: ${this.title}\n\t\t\t* flow: ${this.flow}\n\t\t\t* linkUrl: ${this.linkUrl}\n\t\t\t* bodys: ${this.bodys\n        .map(({ tag, lines }) => `[${tag}]\\n${lines.join(\"\\n\")}`)\n        .join(\"\\n\\n\")}\n\t\t\t* tagBodyMap: ${this.tagBodyMap}\n\t\t\t* bodysWithNoTag: ${this.bodysWithNoTag}\n\t\t\t* comments: ${this.comments}\n\t\t`;\n  }\n}\n","import { SongParser, SongPart } from \"./SongParser\";\nimport { $enum } from \"ts-enum-util\";\nimport { Optional } from \"utility-types\";\n\nexport enum LineCategory {\n  empty,\n  linkUrl,\n  tag,\n  flow,\n  title,\n  comment,\n  body,\n  date,\n  separator,\n  unknown,\n}\n\nconst tagPatterns = [\n  /^V\\d?$/i,\n  /^P?C\\d?$/i,\n  /^B\\d?$/i,\n  /^E(nding)?$/i,\n  /^\\[[A-Z]+\\]$/i,\n];\nconst isTag = (arg: string) => tagPatterns.some((pattern) => pattern.test(arg));\nexport const flowTokenPatterns = [...tagPatterns, /^x\\d$/i, /^간주$/];\nexport const isFlowToken = (arg: string): boolean =>\n  flowTokenPatterns.some((pattern) => pattern.test(arg));\nexport const splitAsTokens = (arg: string): string[] =>\n  arg.split(/[\\W_]/).filter(($0) => /\\w/.test($0));\n\nconst separatorPatterns = [/^[-=*][-=* ]+[-=*]$/];\nconst isSeparator = (arg: string) =>\n  separatorPatterns.some((pattern) => pattern.test(arg));\nconst scoreRange = {\n  certain: 5,\n  notPossible: 0,\n};\n\nconst titleSections = [\n  LineCategory.title,\n  LineCategory.flow,\n  LineCategory.linkUrl,\n];\n\ntype Scorer = (text: string) => number | undefined;\nconst categoryScorer: Partial<Record<LineCategory, Scorer>> = {\n  [LineCategory.empty]: (text) =>\n    text === \"\" ? scoreRange.certain : scoreRange.notPossible,\n  [LineCategory.date]: (text) => undefined,\n  [LineCategory.title]: (text) => {\n    let score = 0;\n    if (/^\\d./.test(text)) {\n      score += 2;\n    }\n    if (/\\(\\w\\)$/.test(text)) {\n      score += 2;\n    }\n    if (/\\(\\w->\\w\\)$/.test(text)) {\n      score += 1;\n    }\n    return score;\n  },\n  [LineCategory.linkUrl]: (text) =>\n    /^https?:\\/\\/.*$/.test(text) ? scoreRange.certain : scoreRange.notPossible,\n  [LineCategory.flow]: (text) => {\n    const tokens = splitAsTokens(text);\n    if (tokens.length === 1) {\n      return scoreRange.notPossible;\n    }\n    const flowTokens = tokens.filter(isFlowToken);\n    return Math.ceil((5 * flowTokens.length) / tokens.length);\n  },\n  [LineCategory.tag]: (text) => {\n    if (isTag(text)) {\n      return scoreRange.certain;\n    }\n    if (/^[A-Z]{,2}\\d?$/i.test(text)) {\n      return 3;\n    }\n  },\n  [LineCategory.body]: (text) => {\n    if (/^[\\w,\"'.)( ]+$/i.test(text)) {\n      return 2;\n    }\n    return 1;\n  },\n  [LineCategory.comment]: (text) => {\n    if (/[가-힣]+/.test(text)) {\n      return 2;\n    }\n    return 1;\n  },\n  [LineCategory.separator]: (text) =>\n    isSeparator(text) ? scoreRange.certain : scoreRange.notPossible,\n};\n\nclass Line {\n  inferedCategory: {\n    value: LineCategory;\n    score: number;\n  };\n  constructor(public text: string) {\n    const categories = $enum(LineCategory).getValues();\n    this.inferedCategory = categories.reduce((result, current) => {\n      if (result?.score === scoreRange.certain) {\n        return result;\n      }\n      const checker = categoryScorer[current];\n      const score = checker?.(text);\n      if (score !== undefined && score > (result?.score ?? -1)) {\n        return { value: current, score: score };\n      }\n      return result;\n    }, undefined as { value: LineCategory; score: number } | undefined) ?? {\n      value: LineCategory.unknown,\n      score: 5,\n    };\n  }\n}\n\nexport class LineParser {\n  lines: Line[];\n  private songsCache?: SongParser[];\n  done = false;\n  constructor(text: string) {\n    this.lines = text\n      .trim()\n      .split(\"\\n\")\n      .map(($0) => $0.trim())\n      .reduce((result, current) => {\n        const lastLine = result[result.length - 1] ?? \"\";\n        if (!(current === \"\" && lastLine.text === \"\")) {\n          result.push(new Line(current));\n        }\n        return result;\n      }, [] as Line[]);\n    console.log(\n      this.lines.map(($0) => ({\n        text: $0.text,\n        category: $enum(LineCategory).getKeyOrDefault($0.inferedCategory.value),\n      }))\n    );\n  }\n\n  songs(): SongParser[] {\n    if (this.songsCache) {\n      return this.songsCache;\n    }\n    const songParts = this.getSongParts();\n    const songs: SongPart[][] = [];\n\n    let startIndexOfSong = 0;\n    let processedLineIndex = 0;\n    for (const [currentIndex, currentPart] of Array.from(songParts.entries())) {\n      if (currentIndex <= processedLineIndex) {\n        continue;\n      }\n      if (currentPart.category === LineCategory.separator) {\n        const previousParts = songParts.slice(startIndexOfSong, currentIndex);\n        if (isCompleteSong(previousParts)) {\n          songs.push(previousParts);\n          startIndexOfSong = currentIndex;\n        }\n      } else if (titleSections.includes(currentPart.category)) {\n        const firstBodyIndexAfterThis = songParts\n          .slice(currentIndex)\n          .findIndex(($0) => $0.category === LineCategory.body);\n        if (firstBodyIndexAfterThis === -1) {\n          processedLineIndex = Number.MAX_SAFE_INTEGER;\n        } else {\n          processedLineIndex = firstBodyIndexAfterThis;\n          const categoriesInTitleSection = songParts\n            .slice(currentIndex, currentIndex + firstBodyIndexAfterThis)\n            .map(($0) => $0.category);\n          if (\n            categoriesInTitleSection.includes(LineCategory.title) ||\n            categoriesInTitleSection.includes(LineCategory.flow) ||\n            categoriesInTitleSection.includes(LineCategory.linkUrl)\n          ) {\n            const previousParts = songParts.slice(\n              startIndexOfSong,\n              currentIndex\n            );\n            if (isCompleteSong(previousParts)) {\n              songs.push(previousParts);\n              startIndexOfSong = currentIndex;\n            }\n          }\n        }\n      }\n    }\n    const remainingParts = songParts.slice(startIndexOfSong);\n    if (isCompleteSong(remainingParts)) {\n      songs.push(remainingParts);\n    }\n\n    this.songsCache = songs.map(($0) => new SongParser($0));\n    return this.songsCache;\n  }\n\n  getSongParts(): SongPart[] {\n    const songParts = [] as Optional<SongPart, \"end\" | \"lines\">[];\n    this.lines.forEach((line, index) => {\n      const last = songParts[songParts.length - 1];\n      if (last === undefined) {\n        songParts.push({ start: index, category: line.inferedCategory.value });\n      } else if (last.category !== line.inferedCategory.value) {\n        last.end = index;\n        songParts.push({ start: index, category: line.inferedCategory.value });\n      }\n    });\n    if (songParts[songParts.length - 1]) {\n      songParts[songParts.length - 1].end = this.lines.length;\n    }\n    return songParts.flatMap((part) => {\n      const { start, end, category } = part;\n      if (end === undefined) {\n        return [];\n      }\n      return [\n        {\n          start,\n          end,\n          category,\n          lines: this.lines.slice(start, end).map(($0) => $0.text),\n        },\n      ];\n    });\n  }\n}\n\nfunction isCompleteSong(songParts: SongPart[]): boolean {\n  return songParts.filter(($0) => $0.category === LineCategory.body).length > 0;\n}\n","import { LineParser } from './LineParser'\nimport { Slide, SlideConvertMethod, SongParser } from './SongParser'\n\nfunction convertSlideToFormText(slide: Slide): string {\n  const { tag, body } = slide\n  return [`[[${tag ?? ''}]]`, body || tag].join('\\n')\n}\nfunction convertSongSlidesToFormText(slides: Slide[]): string {\n  return slides.map(convertSlideToFormText).join('\\n---\\n')\n}\n\nexport class LyricParser {\n  lineParser: LineParser\n  songParsers: SongParser[]\n  constructor(text: string) {\n    this.lineParser = new LineParser(text)\n    this.songParsers = this.lineParser.songs()\n  }\n\n  toFormText(method: SlideConvertMethod = SlideConvertMethod.withFlowOrder): string {\n    return this.songParsers\n      .map($0 => {\n        return convertSongSlidesToFormText($0.toSlides(method))\n      })\n      .join('\\n===\\n')\n  }\n}\n","import React, { useRef } from \"react\";\nimport \"./App.css\";\nimport CSRFToken from \"./api/CSRFToken\";\nimport { LyricParser } from \"./parser/LyricParser\";\nimport { format, getDay } from \"date-fns\";\nimport { addDays } from \"date-fns/esm\";\n\n// const actionUrl = \"https://jjmean2.pythonanywhere.com/ppt_create/lyrics\";\nconst actionUrl = \"http://localhost:8000/ppt_create/lyrics\";\n\nconst getFilename = (): string => {\n  const today = new Date();\n  // 0 is Sunday 6 is Saturday\n  const weekday = getDay(today);\n  const distanceToSunday = (7 - weekday) % 7;\n  const nextSunday = addDays(today, distanceToSunday);\n  const sundayText = format(nextSunday, \"yyyy-MM-dd\");\n  return \"테힐라 찬양 \" + sundayText;\n};\n\nfunction App() {\n  const formRef = useRef<HTMLFormElement>(null);\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n  const hiddenBodyRef = useRef<HTMLInputElement>(null);\n  const filenameRef = useRef<HTMLInputElement>(null);\n  const handleButtonClick = (): void => {\n    if (\n      !formRef.current ||\n      !textAreaRef.current ||\n      !hiddenBodyRef.current ||\n      !filenameRef.current\n    ) {\n      return;\n    }\n    const value = textAreaRef.current?.value;\n    if (!value) {\n      return;\n    }\n    const parser = new LyricParser(value);\n    const formText = parser.toFormText();\n    hiddenBodyRef.current.value = formText;\n    filenameRef.current.value = getFilename();\n    console.log(formText);\n    formRef.current.submit();\n  };\n  return (\n    <div className=\"wrapper\">\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <div className=\"container\">\n          <a className=\"navbar-brand\" href=\"{% url 'lyrics' %}\">\n            가사 PPT 생성기\n          </a>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav mr-auto\">\n              <li className=\"nav-item active\">\n                <a className=\"nav-link\" href=\"{% url 'lyrics' %}\">\n                  가사 생성\n                </a>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n      <div className=\"container\">\n        <div className=\"App\">\n          <form\n            id=\"lyrics_form\"\n            name=\"lyrics_form\"\n            ref={formRef}\n            method=\"post\"\n            action={actionUrl}\n          >\n            <CSRFToken />\n            <input ref={hiddenBodyRef} type=\"hidden\" name=\"body\"></input>\n            <input ref={filenameRef} type=\"hidden\" name=\"filename\"></input>\n          </form>\n          <div className=\"page\">\n            <div className=\"button-container\">\n              <button className=\"btn btn-primary\" onClick={handleButtonClick}>\n                제출\n              </button>\n            </div>\n            <textarea\n              className=\"form-control\"\n              ref={textAreaRef}\n              id=\"lyrics\"\n            ></textarea>\n          </div>\n        </div>\n      </div>{\" \"}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}