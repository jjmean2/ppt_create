{"version":3,"sources":["api/CSRFToken.tsx","parser/SongParser.ts","parser/LineParser.ts","parser/LyricParser.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["axios","defaults","xsrfCookieName","xsrfHeaderName","CSRFToken","SlideConvertMethod","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","replace","substring","decodeURIComponent","getCookie","type","value","convertBodyToSlide","body","tag","lines","console","log","processed","map","$0","trim","join","filter","test","push","slideBody","LineCategory","SongParser","songParts","currentTag","title","flow","linkUrl","bodys","tagBodyMap","Map","bodysWithNoTag","comments","part","category","undefined","this","logDiscard","toUpperCase","error","slice","lastBody","concat","comment","flatMap","lineJoiner","Array","toSlideBodyOrder","flowTokens","splitAsTokens","usedTokens","slidesFromFlowTokens","token","taggedBody","get","slidesFromUnusedTaggedBodys","includes","slidesFromUntaggedBodys","method","withBodyOrder","withFlowOrder","toSlideFlowOrder","tagPatterns","flowTokenPatterns","isFlowToken","arg","some","pattern","separatorPatterns","scoreRange","titleSections","categoryScorer","empty","text","date","score","tokens","Math","ceil","separator","Line","inferedCategory","categories","$enum","getValues","reduce","result","current","checker","unknown","LineParser","songsCache","done","lastLine","getKeyOrDefault","getSongParts","songs","startIndexOfSong","processedLineIndex","from","entries","currentIndex","currentPart","previousParts","isCompleteSong","firstBodyIndexAfterThis","findIndex","Number","MAX_SAFE_INTEGER","categoriesInTitleSection","remainingParts","forEach","line","index","last","start","end","convertSlideToFormText","slide","convertSongSlidesToFormText","slides","LyricParser","lineParser","songParsers","toSlides","App","formRef","useRef","textAreaRef","hiddenBodyRef","filenameRef","className","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","ref","action","onClick","formText","toFormText","today","Date","distanceToSunday","getDay","nextSunday","addDays","format","getFilename","submit","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cc8347ae.chunk.js","sourcesContent":["import React, { ReactElement } from \"react\";\nimport axios from \"axios\";\n\naxios.defaults.xsrfCookieName = \"csrftoken\";\naxios.defaults.xsrfHeaderName = \"X-CSRFToken\";\n\nfunction getCookie(name: string): string | null {\n  var cookieValue = null;\n  if (document.cookie && document.cookie !== \"\") {\n    var cookies = document.cookie.split(\";\");\n    for (var i = 0; i < cookies.length; i++) {\n      var cookie = cookies[i].replace(\" \", \"\");\n      //var cookie = jQuery.trim(cookies[i]); 당신이 만약 jQuery를 사용한다면, 위 코드 대신 이 코드를 사용하여도 좋다\n      if (cookie.substring(0, name.length + 1) === name + \"=\") {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n  return cookieValue;\n}\nfunction CSRFToken(): ReactElement {\n  const csrftoken = getCookie(\"csrftoken\");\n  return (\n    <input type=\"hidden\" name=\"csrfmiddlewaretoken\" value={csrftoken ?? \"\"} />\n  );\n}\n\nexport default CSRFToken;\n","import { LineCategory, splitAsTokens } from \"./LineParser\";\n\nfunction splitArrayBySize<T>(array: T[], size: number): T[][] {\n  const result = [] as T[][];\n  for (const element of array) {\n    const last = result[result.length - 1];\n    if (last && last.length < size) {\n      last.push(element);\n    } else {\n      result.push([element]);\n    }\n  }\n  return result;\n}\n\nfunction convertBodyToSlide(body: Body, lineSize = 2): Slide[] {\n  const { tag, lines } = body;\n  console.log(\"## lines\", lines);\n  const processed = lines\n    .map(($0) => $0.trim())\n    .join(\"\\n\")\n    .replace(/\\/\\/\\n*/g, \"\\n\\n\")\n    .replace(/\\/\\n*/g, \"\\n\")\n    .split(/\\n(\\n)+/)\n    .filter(($0) => !/[[:space:]\\n]*]/.test($0));\n  console.log(\"## processed\", processed);\n  if (processed.length === 0) {\n    processed.push(\"\");\n  }\n  return processed.map((slideBody) => ({\n    tag: tag,\n    body: slideBody.trim(),\n  }));\n}\n\nexport type SongPart = {\n  start: number;\n  end: number;\n  category: LineCategory;\n  lines: string[];\n};\n\nexport type Body = {\n  tag?: string;\n  lines: string[];\n};\n\nexport enum SlideConvertMethod {\n  withFlowOrder,\n  withBodyOrder,\n}\n\nexport type Slide = {\n  tag?: string;\n  body: string;\n};\n\nexport class SongParser {\n  title?: string;\n  flow?: string;\n  linkUrl?: string;\n  bodys: Body[] = [];\n  tagBodyMap = new Map<string, Body>();\n  bodysWithNoTag: Body[] = [];\n  comments: string[] = [];\n\n  private logDiscard(\n    type: string,\n    part: SongPart | string[],\n    lineJoiner = \"\\n\"\n  ) {\n    if (part instanceof Array) {\n      console.error(`${type} part (${part}) is discarded`);\n    } else {\n      console.error(\n        `${type} part (${part.lines.join(lineJoiner)}) is discarded`\n      );\n    }\n  }\n\n  constructor(public songParts: SongPart[]) {\n    let currentTag: string | undefined;\n    for (const part of songParts) {\n      if (part.category === LineCategory.title) {\n        currentTag = undefined;\n        if (this.title === undefined) {\n          this.title = part.lines.join(\"\\n\");\n        } else {\n          this.logDiscard(\"title\", part);\n        }\n      }\n      if (part.category === LineCategory.flow) {\n        currentTag = undefined;\n        if (this.flow === undefined) {\n          this.flow = part.lines.join(\" \");\n        } else {\n          this.logDiscard(\"flow\", part, \" \");\n        }\n      }\n      if (part.category === LineCategory.linkUrl) {\n        currentTag = undefined;\n        if (this.linkUrl === undefined) {\n          this.linkUrl = part.lines.join(\"\\n\");\n        } else {\n          this.logDiscard(\"linkUrl\", part);\n        }\n      }\n      if (part.category === LineCategory.tag) {\n        currentTag = part.lines[0].toUpperCase() || undefined;\n        console.error(\"set current tag\", currentTag);\n        if (part.lines.length > 1) {\n          this.logDiscard(\"tag\", part.lines.slice(1), \", \");\n        }\n      }\n      if (part.category === LineCategory.body) {\n        console.error(\"current tag for body\", currentTag);\n        const lastBody = this.bodys[this.bodys.length - 1];\n        if (lastBody && currentTag && lastBody.tag === currentTag) {\n          lastBody.lines = lastBody.lines.concat(part.lines);\n        } else {\n          this.bodys.push({ tag: currentTag, lines: part.lines });\n        }\n      }\n      if (part.category === LineCategory.comment) {\n        this.comments.push(part.lines.join(\"\\n\"));\n      }\n    }\n\n    this.bodysWithNoTag = this.bodys.filter(($0) => $0.tag === undefined);\n    console.log(\"bodysWith NoTag\", this.bodysWithNoTag);\n    this.tagBodyMap = new Map(\n      this.bodys\n        .flatMap(({ tag, lines }) => (tag ? [{ tag, lines }] : []))\n        .map(($0) => [$0.tag, $0])\n    );\n  }\n\n  toSlideBodyOrder(): Slide[] {\n    return this.bodys.flatMap(($0) => convertBodyToSlide($0));\n  }\n\n  toSlideFlowOrder(): Slide[] {\n    if (this.flow === undefined) {\n      return this.toSlideBodyOrder();\n    }\n    const flowTokens = splitAsTokens(this.flow).map(($0) => $0.toUpperCase());\n    const usedTokens = [] as string[];\n    const bodys = flowTokens.map((token) => {\n      if (token) {\n        const taggedBody = this.tagBodyMap.get(token);\n        if (taggedBody) {\n          usedTokens.push(token);\n          return taggedBody;\n        }\n      }\n      return token;\n    });\n    const slidesFromFlowTokens: Slide[] = bodys.flatMap((body) => {\n      if (typeof body === \"string\") {\n        return [{ tag: body, body: \"\" }];\n      } else {\n        return convertBodyToSlide(body);\n      }\n    });\n    const slidesFromUnusedTaggedBodys = this.bodys\n      .filter(($0) => $0.tag && !usedTokens.includes($0.tag))\n      .flatMap(($0) => convertBodyToSlide($0));\n    const slidesFromUntaggedBodys = this.bodysWithNoTag.flatMap(($0) =>\n      convertBodyToSlide($0)\n    );\n    return slidesFromFlowTokens\n      .concat(slidesFromUnusedTaggedBodys)\n      .concat(slidesFromUntaggedBodys);\n  }\n\n  toSlides(\n    method: SlideConvertMethod = SlideConvertMethod.withBodyOrder\n  ): Slide[] {\n    switch (method) {\n      case SlideConvertMethod.withFlowOrder:\n        return this.toSlideFlowOrder();\n      case SlideConvertMethod.withBodyOrder:\n        return this.toSlideBodyOrder();\n      default:\n        return this.toSlideBodyOrder();\n    }\n  }\n\n  toString(): string {\n    return `\n\t\t\t* title: ${this.title}\n\t\t\t* flow: ${this.flow}\n\t\t\t* linkUrl: ${this.linkUrl}\n\t\t\t* bodys: ${this.bodys\n        .map(({ tag, lines }) => `[${tag}]\\n${lines.join(\"\\n\")}`)\n        .join(\"\\n\\n\")}\n\t\t\t* tagBodyMap: ${this.tagBodyMap}\n\t\t\t* bodysWithNoTag: ${this.bodysWithNoTag}\n\t\t\t* comments: ${this.comments}\n\t\t`;\n  }\n}\n","import { SongParser, SongPart } from \"./SongParser\";\nimport { $enum } from \"ts-enum-util\";\nimport { Optional } from \"utility-types\";\n\nexport enum LineCategory {\n  empty,\n  linkUrl,\n  tag,\n  flow,\n  title,\n  comment,\n  body,\n  date,\n  separator,\n  unknown,\n}\n\nconst tagPatterns = [\n  /^V\\d?$/i,\n  /^P?C\\d?$/i,\n  /^B\\d?$/i,\n  /^E(nding)?$/i,\n  /^\\[[A-Z]+\\]$/i,\n];\nconst isTag = (arg: string) => tagPatterns.some((pattern) => pattern.test(arg));\nexport const flowTokenPatterns = [...tagPatterns, /^x\\d$/i, /^간주$/];\nexport const isFlowToken = (arg: string): boolean =>\n  flowTokenPatterns.some((pattern) => pattern.test(arg));\nexport const splitAsTokens = (arg: string): string[] =>\n  arg.split(/[\\W_]/).filter(($0) => /\\w/.test($0));\n\nconst separatorPatterns = [/^[-=*][-=* ]+[-=*]$/];\nconst isSeparator = (arg: string) =>\n  separatorPatterns.some((pattern) => pattern.test(arg));\nconst scoreRange = {\n  certain: 5,\n  notPossible: 0,\n};\n\nconst titleSections = [\n  LineCategory.title,\n  LineCategory.flow,\n  LineCategory.linkUrl,\n];\n\ntype Scorer = (text: string) => number | undefined;\nconst categoryScorer: Partial<Record<LineCategory, Scorer>> = {\n  [LineCategory.empty]: (text) =>\n    text === \"\" ? scoreRange.certain : scoreRange.notPossible,\n  [LineCategory.date]: (text) => undefined,\n  [LineCategory.title]: (text) => {\n    let score = 0;\n    if (/^\\d./.test(text)) {\n      score += 2;\n    }\n    if (/\\(\\w\\)$/.test(text)) {\n      score += 2;\n    }\n    if (/\\(\\w->\\w\\)$/.test(text)) {\n      score += 1;\n    }\n    return score;\n  },\n  [LineCategory.linkUrl]: (text) =>\n    /^https?:\\/\\/.*$/.test(text) ? scoreRange.certain : scoreRange.notPossible,\n  [LineCategory.flow]: (text) => {\n    const tokens = splitAsTokens(text);\n    if (tokens.length === 1) {\n      return scoreRange.notPossible;\n    }\n    const flowTokens = tokens.filter(isFlowToken);\n    return Math.ceil((5 * flowTokens.length) / tokens.length);\n  },\n  [LineCategory.tag]: (text) => {\n    if (isTag(text)) {\n      return scoreRange.certain;\n    }\n    if (/^[A-Z]{,2}\\d?$/i.test(text)) {\n      return 3;\n    }\n  },\n  [LineCategory.body]: (text) => {\n    if (/^[\\w,\"'.)(/ -]+$/i.test(text)) {\n      return 2;\n    }\n    return 1;\n  },\n  [LineCategory.comment]: (text) => {\n    if (/[가-힣]+/.test(text)) {\n      return 2;\n    }\n    return 0;\n  },\n  [LineCategory.separator]: (text) =>\n    isSeparator(text) ? scoreRange.certain : scoreRange.notPossible,\n};\n\nclass Line {\n  inferedCategory: {\n    value: LineCategory;\n    score: number;\n  };\n  constructor(public text: string) {\n    const categories = $enum(LineCategory).getValues();\n    this.inferedCategory = categories.reduce((result, current) => {\n      if (result?.score === scoreRange.certain) {\n        return result;\n      }\n      const checker = categoryScorer[current];\n      const score = checker?.(text);\n      if (score !== undefined && score > (result?.score ?? -1)) {\n        return { value: current, score: score };\n      }\n      return result;\n    }, undefined as { value: LineCategory; score: number } | undefined) ?? {\n      value: LineCategory.unknown,\n      score: 5,\n    };\n  }\n}\n\nexport class LineParser {\n  lines: Line[];\n  private songsCache?: SongParser[];\n  done = false;\n  constructor(text: string) {\n    this.lines = text\n      .trim()\n      .split(\"\\n\")\n      .map(($0) => $0.trim())\n      .reduce((result, current) => {\n        const lastLine = result[result.length - 1] ?? \"\";\n        if (!(current === \"\" && lastLine.text === \"\")) {\n          result.push(new Line(current));\n        }\n        return result;\n      }, [] as Line[]);\n    console.log(\n      this.lines.map(($0) => ({\n        text: $0.text,\n        category: $enum(LineCategory).getKeyOrDefault($0.inferedCategory.value),\n      }))\n    );\n  }\n\n  songs(): SongParser[] {\n    if (this.songsCache) {\n      return this.songsCache;\n    }\n    const songParts = this.getSongParts();\n    const songs: SongPart[][] = [];\n\n    let startIndexOfSong = 0;\n    let processedLineIndex = 0;\n    for (const [currentIndex, currentPart] of Array.from(songParts.entries())) {\n      if (currentIndex <= processedLineIndex) {\n        continue;\n      }\n      if (currentPart.category === LineCategory.separator) {\n        const previousParts = songParts.slice(startIndexOfSong, currentIndex);\n        if (isCompleteSong(previousParts)) {\n          songs.push(previousParts);\n          startIndexOfSong = currentIndex;\n        }\n      } else if (titleSections.includes(currentPart.category)) {\n        const firstBodyIndexAfterThis = songParts\n          .slice(currentIndex)\n          .findIndex(($0) => $0.category === LineCategory.body);\n        if (firstBodyIndexAfterThis === -1) {\n          processedLineIndex = Number.MAX_SAFE_INTEGER;\n        } else {\n          processedLineIndex = firstBodyIndexAfterThis;\n          const categoriesInTitleSection = songParts\n            .slice(currentIndex, currentIndex + firstBodyIndexAfterThis)\n            .map(($0) => $0.category);\n          if (\n            categoriesInTitleSection.includes(LineCategory.title) ||\n            categoriesInTitleSection.includes(LineCategory.flow) ||\n            categoriesInTitleSection.includes(LineCategory.linkUrl)\n          ) {\n            const previousParts = songParts.slice(\n              startIndexOfSong,\n              currentIndex\n            );\n            if (isCompleteSong(previousParts)) {\n              songs.push(previousParts);\n              startIndexOfSong = currentIndex;\n            }\n          }\n        }\n      }\n    }\n    const remainingParts = songParts.slice(startIndexOfSong);\n    if (isCompleteSong(remainingParts)) {\n      songs.push(remainingParts);\n    }\n\n    this.songsCache = songs.map(($0) => new SongParser($0));\n    return this.songsCache;\n  }\n\n  getSongParts(): SongPart[] {\n    const songParts = [] as Optional<SongPart, \"end\" | \"lines\">[];\n    this.lines.forEach((line, index) => {\n      const last = songParts[songParts.length - 1];\n      if (last === undefined) {\n        songParts.push({ start: index, category: line.inferedCategory.value });\n      } else if (last.category !== line.inferedCategory.value) {\n        last.end = index;\n        songParts.push({ start: index, category: line.inferedCategory.value });\n      }\n    });\n    if (songParts[songParts.length - 1]) {\n      songParts[songParts.length - 1].end = this.lines.length;\n    }\n    return songParts.flatMap((part) => {\n      const { start, end, category } = part;\n      if (end === undefined) {\n        return [];\n      }\n      return [\n        {\n          start,\n          end,\n          category,\n          lines: this.lines.slice(start, end).map(($0) => $0.text),\n        },\n      ];\n    });\n  }\n}\n\nfunction isCompleteSong(songParts: SongPart[]): boolean {\n  return songParts.filter(($0) => $0.category === LineCategory.body).length > 0;\n}\n","import { LineParser } from './LineParser'\nimport { Slide, SlideConvertMethod, SongParser } from './SongParser'\n\nfunction convertSlideToFormText(slide: Slide): string {\n  const { tag, body } = slide\n  return [`[[${tag ?? ''}]]`, body || tag].join('\\n')\n}\nfunction convertSongSlidesToFormText(slides: Slide[]): string {\n  return slides.map(convertSlideToFormText).join('\\n---\\n')\n}\n\nexport class LyricParser {\n  lineParser: LineParser\n  songParsers: SongParser[]\n  constructor(text: string) {\n    this.lineParser = new LineParser(text)\n    this.songParsers = this.lineParser.songs()\n  }\n\n  toFormText(method: SlideConvertMethod = SlideConvertMethod.withFlowOrder): string {\n    return this.songParsers\n      .map($0 => {\n        return convertSongSlidesToFormText($0.toSlides(method))\n      })\n      .join('\\n===\\n')\n  }\n}\n","import React, { useRef } from \"react\";\nimport \"./App.css\";\nimport CSRFToken from \"./api/CSRFToken\";\nimport { LyricParser } from \"./parser/LyricParser\";\nimport { format, getDay } from \"date-fns\";\nimport { addDays } from \"date-fns/esm\";\n\nconst actionUrl = \"https://jjmean2.pythonanywhere.com/ppt_create/lyrics\";\n// const actionUrl = \"http://localhost:8000/ppt_create/lyrics\";\n\nconst getFilename = (): string => {\n  const today = new Date();\n  // 0 is Sunday 6 is Saturday\n  const weekday = getDay(today);\n  const distanceToSunday = (7 - weekday) % 7;\n  const nextSunday = addDays(today, distanceToSunday);\n  const sundayText = format(nextSunday, \"yyyy-MM-dd\");\n  return \"테힐라 찬양 \" + sundayText;\n};\n\nfunction App() {\n  const formRef = useRef<HTMLFormElement>(null);\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n  const hiddenBodyRef = useRef<HTMLInputElement>(null);\n  const filenameRef = useRef<HTMLInputElement>(null);\n  const handleButtonClick = (): void => {\n    if (\n      !formRef.current ||\n      !textAreaRef.current ||\n      !hiddenBodyRef.current ||\n      !filenameRef.current\n    ) {\n      return;\n    }\n    const value = textAreaRef.current?.value;\n    if (!value) {\n      return;\n    }\n    const parser = new LyricParser(value);\n    const formText = parser.toFormText();\n    hiddenBodyRef.current.value = formText;\n    filenameRef.current.value = getFilename();\n    console.log(formText);\n    formRef.current.submit();\n  };\n  return (\n    <div className=\"wrapper\">\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <div className=\"container\">\n          <a className=\"navbar-brand\" href=\"{% url 'lyrics' %}\">\n            가사 PPT 생성기\n          </a>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav mr-auto\">\n              <li className=\"nav-item active\">\n                <a className=\"nav-link\" href=\"{% url 'lyrics' %}\">\n                  가사 생성\n                </a>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n      <div className=\"container\">\n        <div className=\"App\">\n          <form\n            id=\"lyrics_form\"\n            name=\"lyrics_form\"\n            ref={formRef}\n            method=\"post\"\n            action={actionUrl}\n          >\n            <CSRFToken />\n            <input ref={hiddenBodyRef} type=\"hidden\" name=\"body\"></input>\n            <input ref={filenameRef} type=\"hidden\" name=\"filename\"></input>\n          </form>\n          <div className=\"page\">\n            <div className=\"button-container\">\n              <button className=\"btn btn-primary\" onClick={handleButtonClick}>\n                제출\n              </button>\n            </div>\n            <textarea\n              className=\"form-control\"\n              ref={textAreaRef}\n              id=\"lyrics\"\n            ></textarea>\n          </div>\n        </div>\n      </div>{\" \"}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}