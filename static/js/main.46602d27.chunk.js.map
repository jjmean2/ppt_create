{"version":3,"sources":["api/CSRFToken.tsx","parser/SongParser.ts","parser/LineParser.ts","parser/LyricParser.ts","views/PPTCreatLegacy/index.tsx","error/FatalError.ts","views/common/BasicAppBar.tsx","views/common/asPage.tsx","views/PPTGenerator/util.tsx","views/PPTGenerator/index.tsx","views/PPTGenerator/useCreatePPT.tsx","Routes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["axios","defaults","xsrfCookieName","xsrfHeaderName","CSRFToken","SlideConvertMethod","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","replace","substring","decodeURIComponent","getCookie","type","value","escapeRegExp","string","convertBodyToSlide","body","delimiter","lineDelim","RegExp","slideDelim","tag","lines","console","log","text","delimProcessed","map","$0","trim","join","processed","toUpperCase","slice","capitalizeEachLine","filter","test","push","slideBody","LineCategory","SongParser","songParts","currentTag","title","flow","linkUrl","bodys","tagBodyMap","Map","bodysWithNoTag","comments","part","category","undefined","this","line","metaLinePattern","logDiscard","error","lastBody","concat","comment","flatMap","lineJoiner","Array","options","toSlideBodyOrder","flowTokens","splitAsTokens","isTag","usedTokens","slidesFromFlowTokens","token","taggedBody","get","slidesFromUnusedTaggedBodys","includes","slidesFromUntaggedBodys","method","withFlowOrder","toSlideFlowOrder","withBodyOrder","tagPatterns","arg","some","pattern","flowTokenDelimiterPattern","flowTokenPatterns","isFlowToken","Boolean","separatorPatterns","metaNames","getSingleMatchedMetaName","lineMetaName","matches","match","getMetaNameInLine","matchedMetaName","metaName","startsWith","scoreRange","titleSections","categoryScorer","empty","date","score","tokens","flowTokenRatio","invalidFlowTokenCount","separator","Line","inferedCategory","categories","$enum","getValues","reduce","result","current","checker","unknown","LineParser","songsCache","done","lastLine","getKeyOrDefault","getSongParts","songs","startIndexOfSong","processedLineIndex","from","entries","currentIndex","currentPart","previousParts","isCompleteSong","firstBodyIndexAfterThis","findIndex","Number","MAX_SAFE_INTEGER","categoriesInTitleSection","remainingParts","forEach","index","last","start","end","convertSlideToFormText","slide","convertSongSlidesToFormText","slides","LyricParser","lineParser","songParsers","toSlides","getFilename","today","Date","distanceToSunday","getDay","nextSunday","addDays","format","PPTCreateLegacy","formRef","useRef","periodInputRef","delimiterInputRef","filenameInputRef","textAreaRef","hiddenBodyRef","filenameRef","className","href","to","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","ref","action","htmlFor","placeholder","onClick","formText","toFormText","submit","alert","FatalError","message","Error","BasicAppBar","props","AppBar","position","Toolbar","IconButton","edge","color","sx","mr","Typography","variant","component","flexGrow","Button","asPage","Component","PageComponent","Box","display","flexDirection","height","displayName","getDefaultPPTFilename","TextArea","styled","inputBodyRef","inputFilenameRef","formElement","createPPT","useCallback","params","filename","lyricText","hiddenPPTCreateFormElement","useCreatePPT","p","alignItems","Routes","exact","path","App","basename","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.46602d27.chunk.js","sourcesContent":["import React, { ReactElement } from \"react\";\nimport axios from \"axios\";\n\naxios.defaults.xsrfCookieName = \"csrftoken\";\naxios.defaults.xsrfHeaderName = \"X-CSRFToken\";\n\nfunction getCookie(name: string): string | null {\n  var cookieValue = null;\n  if (document.cookie && document.cookie !== \"\") {\n    var cookies = document.cookie.split(\";\");\n    for (var i = 0; i < cookies.length; i++) {\n      var cookie = cookies[i].replace(\" \", \"\");\n      //var cookie = jQuery.trim(cookies[i]); 당신이 만약 jQuery를 사용한다면, 위 코드 대신 이 코드를 사용하여도 좋다\n      if (cookie.substring(0, name.length + 1) === name + \"=\") {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n  return cookieValue;\n}\nfunction CSRFToken(): ReactElement {\n  const csrftoken = getCookie(\"csrftoken\");\n  return (\n    <input type=\"hidden\" name=\"csrfmiddlewaretoken\" value={csrftoken ?? \"\"} />\n  );\n}\n\nexport default CSRFToken;\n","import {\n  LineCategory,\n  splitAsTokens,\n  isTag,\n  metaLinePattern,\n} from \"./LineParser\";\n\nfunction trimEachLine(text: string) {\n  return text\n    .split(\"\\n\")\n    .map(($0) => $0.trim())\n    .join(\"\\n\");\n}\n\nfunction capitalizeEachLine(text: string) {\n  return text\n    .split(\"\\n\")\n    .map(($0) => ($0[0]?.toUpperCase() ?? \"\") + $0.slice(1))\n    .join(\"\\n\");\n}\n\nfunction escapeRegExp(string: string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n}\n\nfunction convertBodyToSlide(body: Body, delimiter: string): Slide[] {\n  const lineDelim = new RegExp(`\\\\n?${escapeRegExp(delimiter)}\\\\n?`, \"g\");\n  const slideDelim = new RegExp(\n    `\\\\n?${escapeRegExp(`${delimiter}${delimiter}`)}\\\\n?`,\n    \"g\"\n  );\n  const slideTerm = /\\n\\n+/g;\n\n  const { tag, lines } = body;\n  console.log(\"## lines\", lines);\n  const delimProcessed = lines\n    .map(($0) => $0.trim())\n    .join(\"\\n\")\n    .replace(slideDelim, \"\\n\\n\")\n    .replace(lineDelim, \"\\n\");\n  const processed = capitalizeEachLine(trimEachLine(delimProcessed))\n    .split(slideTerm)\n    .filter(($0) => /^(?!\\s*$).+/.test($0));\n\n  console.log(\"## processed\", processed);\n  if (processed.length === 0) {\n    processed.push(\"\");\n  }\n  return processed.map((slideBody) => ({\n    tag: tag,\n    body: slideBody.replace(/\\//g, \"\\n\").trim(),\n  }));\n}\n\nexport type SongPart = {\n  start: number;\n  end: number;\n  category: LineCategory;\n  lines: string[];\n};\n\nexport type Body = {\n  tag?: string;\n  lines: string[];\n};\n\nexport enum SlideConvertMethod {\n  withFlowOrder,\n  withBodyOrder,\n}\n\nexport type Slide = {\n  tag?: string;\n  body: string;\n};\n\nexport class SongParser {\n  title?: string;\n  flow?: string;\n  linkUrl?: string;\n  bodys: Body[] = [];\n  tagBodyMap = new Map<string, Body>();\n  bodysWithNoTag: Body[] = [];\n  comments: string[] = [];\n\n  private logDiscard(\n    type: string,\n    part: SongPart | string[],\n    lineJoiner = \"\\n\"\n  ) {\n    if (part instanceof Array) {\n      console.error(`${type} part (${part}) is discarded`);\n    } else {\n      console.error(\n        `${type} part (${part.lines.join(lineJoiner)}) is discarded`\n      );\n    }\n  }\n\n  constructor(public songParts: SongPart[]) {\n    let currentTag: string | undefined;\n    for (const part of songParts) {\n      if (part.category === LineCategory.title) {\n        currentTag = undefined;\n        if (this.title === undefined) {\n          this.title = part.lines\n            .map((line) => line.replace(metaLinePattern, \"\"))\n            .join(\"\\n\");\n        } else {\n          this.logDiscard(\"title\", part);\n        }\n      }\n      if (part.category === LineCategory.flow) {\n        currentTag = undefined;\n        if (this.flow === undefined) {\n          this.flow = part.lines\n            .map((line) => line.replace(metaLinePattern, \"\"))\n            .join(\" \");\n        } else {\n          this.logDiscard(\"flow\", part, \" \");\n        }\n      }\n      if (part.category === LineCategory.linkUrl) {\n        currentTag = undefined;\n        if (this.linkUrl === undefined) {\n          this.linkUrl = part.lines.join(\"\\n\");\n        } else {\n          this.logDiscard(\"linkUrl\", part);\n        }\n      }\n      if (part.category === LineCategory.tag) {\n        currentTag =\n          part.lines[0]\n            ?.replace(/^#/, \"\")\n            .replace(/[\\][]/g, \"\")\n            .toUpperCase() || undefined;\n        console.error(\"set current tag\", currentTag);\n        if (part.lines.length > 1) {\n          this.logDiscard(\"tag\", part.lines.slice(1), \", \");\n        }\n      }\n      if (part.category === LineCategory.body) {\n        console.error(\"current tag for body\", currentTag);\n        const lastBody = this.bodys[this.bodys.length - 1];\n        if (lastBody && currentTag && lastBody.tag === currentTag) {\n          lastBody.lines = lastBody.lines.concat(\"\\n\", part.lines);\n        } else {\n          this.bodys.push({ tag: currentTag, lines: part.lines });\n        }\n      }\n      if (part.category === LineCategory.comment) {\n        this.comments.push(part.lines.join(\"\\n\"));\n      }\n    }\n\n    this.bodysWithNoTag = this.bodys.filter(($0) => $0.tag === undefined);\n    console.log(\"bodysWith NoTag\", this.bodysWithNoTag);\n    this.tagBodyMap = new Map(\n      this.bodys\n        .flatMap(({ tag, lines }) => (tag ? [{ tag, lines }] : []))\n        .map(($0) => [$0.tag, $0])\n    );\n  }\n\n  toSlideBodyOrder(options: { delimiter: string }): Slide[] {\n    const { delimiter } = options;\n    return this.bodys.flatMap(($0) => convertBodyToSlide($0, delimiter));\n  }\n\n  toSlideFlowOrder(options: { delimiter: string }): Slide[] {\n    const { delimiter } = options;\n    if (this.flow === undefined) {\n      return this.toSlideBodyOrder(options);\n    }\n    const flowTokens = splitAsTokens(this.flow)\n      .filter(isTag)\n      .map(($0) => $0.toUpperCase());\n    const usedTokens = [] as string[];\n    const bodys = flowTokens.map((token) => {\n      if (token) {\n        const taggedBody = this.tagBodyMap.get(token);\n        if (taggedBody) {\n          usedTokens.push(token);\n          return taggedBody;\n        }\n      }\n      return token;\n    });\n    const slidesFromFlowTokens: Slide[] = bodys.flatMap((body) => {\n      if (typeof body === \"string\") {\n        return [{ tag: body, body: \"\" }];\n      } else {\n        return convertBodyToSlide(body, delimiter);\n      }\n    });\n    const slidesFromUnusedTaggedBodys = this.bodys\n      .filter(($0) => $0.tag && !usedTokens.includes($0.tag))\n      .flatMap(($0) => convertBodyToSlide($0, delimiter));\n    const slidesFromUntaggedBodys = this.bodysWithNoTag.flatMap(($0) =>\n      convertBodyToSlide($0, delimiter)\n    );\n    return slidesFromFlowTokens\n      .concat(slidesFromUnusedTaggedBodys)\n      .concat(slidesFromUntaggedBodys);\n  }\n\n  toSlides(\n    options: {\n      method?: SlideConvertMethod;\n      delimiter?: string;\n    } = {}\n  ): Slide[] {\n    const {\n      method = SlideConvertMethod.withFlowOrder,\n      delimiter = \"/\",\n    } = options;\n    switch (method) {\n      case SlideConvertMethod.withFlowOrder:\n        return this.toSlideFlowOrder({ delimiter });\n      case SlideConvertMethod.withBodyOrder:\n        return this.toSlideBodyOrder({ delimiter });\n      default:\n        return this.toSlideBodyOrder({ delimiter });\n    }\n  }\n\n  toString(): string {\n    return `\n\t\t\t* title: ${this.title}\n\t\t\t* flow: ${this.flow}\n\t\t\t* linkUrl: ${this.linkUrl}\n\t\t\t* bodys: ${this.bodys\n        .map(({ tag, lines }) => `[${tag}]\\n${lines.join(\"\\n\")}`)\n        .join(\"\\n\\n\")}\n\t\t\t* tagBodyMap: ${this.tagBodyMap}\n\t\t\t* bodysWithNoTag: ${this.bodysWithNoTag}\n\t\t\t* comments: ${this.comments}\n\t\t`;\n  }\n}\n","import { SongParser, SongPart } from \"./SongParser\";\nimport { $enum } from \"ts-enum-util\";\nimport { Optional } from \"utility-types\";\n\nexport enum LineCategory {\n  empty,\n  linkUrl,\n  tag,\n  flow,\n  title,\n  comment,\n  body,\n  date,\n  separator,\n  unknown,\n}\n\nconst tagPatterns = [\n  /^(V\\d?E?['\"]*)$/i,\n  /^(P?C\\d?E?['\"]*)$/i,\n  /^(B\\d?['\"]*)$/i,\n  /^(E(nding)?\\d?['\"]*)$/i,\n  /^\\[([\\w\\d]+['\"]*)\\]$/i,\n  /^#([\\w\\d]+['\"]*)$/i,\n];\nexport const isTag = (arg: string) =>\n  tagPatterns.some((pattern) => pattern.test(arg));\nconst flowTokenDelimiterPattern = /[^'\"\\w\\d)(가-힣]+/;\nexport const flowTokenPatterns = [\n  ...tagPatterns,\n  /^\\(?x\\d\\)?$/i,\n  /^간주$/,\n  /^조용히$/,\n  /^\\([가-힣]+\\)$/,\n];\nexport const isFlowToken = (arg: string): boolean =>\n  flowTokenPatterns.some((pattern) => pattern.test(arg));\nexport const splitAsTokens = (arg: string): string[] =>\n  arg.split(flowTokenDelimiterPattern).filter((token) => Boolean(token));\n\nconst separatorPatterns = [/^[-=*][-=* ]+[-=*]$/];\nconst isSeparator = (arg: string) =>\n  separatorPatterns.some((pattern) => pattern.test(arg));\n\nconst metaNames = [\"title\", \"flow\"] as const;\ntype MetaName = typeof metaNames[number];\n\nexport const metaLinePattern = /^@([\\w-]+):/i;\nfunction getMetaNameInLine(line: string): string | null {\n  const matches = line.match(metaLinePattern);\n  if (matches === null) {\n    return null;\n  }\n  return matches[1];\n}\nfunction getSingleMatchedMetaName(line: string): MetaName | null {\n  const lineMetaName = getMetaNameInLine(line);\n  if (lineMetaName === null) {\n    return null;\n  }\n  const matchedMetaName = metaNames.filter((metaName) =>\n    metaName.startsWith(lineMetaName)\n  );\n  if (matchedMetaName.length !== 1) {\n    return null;\n  }\n  return matchedMetaName[0];\n}\n\nconst scoreRange = {\n  certain: 5,\n  notPossible: 0,\n};\n\nconst titleSections = [\n  LineCategory.title,\n  LineCategory.flow,\n  LineCategory.linkUrl,\n];\n\ntype Scorer = (text: string) => number | undefined;\nconst categoryScorer: Partial<Record<LineCategory, Scorer>> = {\n  [LineCategory.empty]: (text) =>\n    text === \"\" ? scoreRange.certain : scoreRange.notPossible,\n  [LineCategory.date]: (text) => undefined,\n  [LineCategory.title]: (text) => {\n    const metaName = getSingleMatchedMetaName(text);\n    if (metaName === \"title\") {\n      return scoreRange.certain;\n    }\n    let score = 0;\n    if (/^\\d\\. /.test(text)) {\n      score += 2;\n    }\n    if (/\\(\\w\\)$/.test(text)) {\n      score += 2;\n    }\n    if (/\\(\\w->\\w\\)$/.test(text)) {\n      score += 1;\n    }\n    return score;\n  },\n  [LineCategory.linkUrl]: (text) =>\n    /^https?:\\/\\/.*$/.test(text) ? scoreRange.certain : scoreRange.notPossible,\n  [LineCategory.flow]: (text) => {\n    const metaName = getSingleMatchedMetaName(text);\n    if (metaName === \"flow\") {\n      return scoreRange.certain;\n    }\n\n    const tokens = splitAsTokens(text);\n    if (tokens.length === 1) {\n      return scoreRange.notPossible;\n    }\n    const flowTokens = tokens.filter(isFlowToken);\n    if (flowTokens.length === 1) {\n      return scoreRange.notPossible;\n    }\n    const flowTokenRatio = flowTokens.length / tokens.length;\n    const invalidFlowTokenCount = tokens.length - flowTokens.length;\n\n    if (tokens.length > 3 && flowTokenRatio === 1) {\n      return 4;\n    }\n    if (tokens.length > 7 && invalidFlowTokenCount <= 2) {\n      return 4;\n    }\n    if (tokens.length > 10 && invalidFlowTokenCount <= 3) {\n      return 4;\n    }\n    return 1;\n  },\n  [LineCategory.tag]: (text) => {\n    if (isTag(text)) {\n      return scoreRange.certain;\n    }\n    if (/^[A-Z]{,2}\\d?$/i.test(text)) {\n      return 3;\n    }\n  },\n  [LineCategory.body]: (text) => {\n    // if (/^[\\w\\d,\"'.)(/ -]+$/i.test(text)) {\n    //   return 2;\n    // }\n    // return 1;\n    return 2;\n  },\n  [LineCategory.comment]: (text) => {\n    if (/[가-힣]+/.test(text)) {\n      return 2;\n    }\n    return 0;\n  },\n  [LineCategory.separator]: (text) =>\n    isSeparator(text) ? scoreRange.certain : scoreRange.notPossible,\n};\n\nclass Line {\n  inferedCategory: {\n    value: LineCategory;\n    score: number;\n  };\n  constructor(public text: string) {\n    const categories = $enum(LineCategory).getValues();\n    this.inferedCategory = categories.reduce((result, current) => {\n      if (result?.score === scoreRange.certain) {\n        return result;\n      }\n      const checker = categoryScorer[current];\n      const score = checker?.(text);\n      if (score !== undefined && score > (result?.score ?? -1)) {\n        return { value: current, score: score };\n      }\n      return result;\n    }, undefined as { value: LineCategory; score: number } | undefined) ?? {\n      value: LineCategory.unknown,\n      score: 5,\n    };\n  }\n}\n\nexport class LineParser {\n  lines: Line[];\n  private songsCache?: SongParser[];\n  done = false;\n  constructor(text: string) {\n    this.lines = text\n      .trim()\n      .split(\"\\n\")\n      .map(($0) => $0.trim())\n      .reduce((result, current) => {\n        const lastLine = result[result.length - 1] ?? \"\";\n        if (!(current === \"\" && lastLine.text === \"\")) {\n          result.push(new Line(current));\n        }\n        return result;\n      }, [] as Line[]);\n    console.log(\n      this.lines.map(($0) => ({\n        text: $0.text,\n        category: $enum(LineCategory).getKeyOrDefault($0.inferedCategory.value),\n      }))\n    );\n  }\n\n  songs(): SongParser[] {\n    if (this.songsCache) {\n      return this.songsCache;\n    }\n    const songParts = this.getSongParts();\n    const songs: SongPart[][] = [];\n\n    let startIndexOfSong = 0;\n    let processedLineIndex = 0;\n    for (const [currentIndex, currentPart] of Array.from(songParts.entries())) {\n      if (currentIndex <= processedLineIndex) {\n        continue;\n      }\n      if (currentPart.category === LineCategory.separator) {\n        const previousParts = songParts.slice(startIndexOfSong, currentIndex);\n        if (isCompleteSong(previousParts)) {\n          songs.push(previousParts);\n          startIndexOfSong = currentIndex;\n        }\n      } else if (titleSections.includes(currentPart.category)) {\n        const firstBodyIndexAfterThis = songParts\n          .slice(currentIndex)\n          .findIndex(($0) => $0.category === LineCategory.body);\n        if (firstBodyIndexAfterThis === -1) {\n          processedLineIndex = Number.MAX_SAFE_INTEGER;\n        } else {\n          processedLineIndex = firstBodyIndexAfterThis;\n          const categoriesInTitleSection = songParts\n            .slice(currentIndex, currentIndex + firstBodyIndexAfterThis)\n            .map(($0) => $0.category);\n          if (\n            categoriesInTitleSection.includes(LineCategory.title) ||\n            categoriesInTitleSection.includes(LineCategory.flow) ||\n            categoriesInTitleSection.includes(LineCategory.linkUrl)\n          ) {\n            const previousParts = songParts.slice(\n              startIndexOfSong,\n              currentIndex\n            );\n            if (isCompleteSong(previousParts)) {\n              songs.push(previousParts);\n              startIndexOfSong = currentIndex;\n            }\n          }\n        }\n      }\n    }\n    const remainingParts = songParts.slice(startIndexOfSong);\n    if (isCompleteSong(remainingParts)) {\n      songs.push(remainingParts);\n    }\n\n    this.songsCache = songs.map(($0) => new SongParser($0));\n    return this.songsCache;\n  }\n\n  getSongParts(): SongPart[] {\n    const songParts = [] as Optional<SongPart, \"end\" | \"lines\">[];\n    this.lines.forEach((line, index) => {\n      const last = songParts[songParts.length - 1];\n      if (last === undefined) {\n        songParts.push({ start: index, category: line.inferedCategory.value });\n      } else if (last.category !== line.inferedCategory.value) {\n        last.end = index;\n        songParts.push({ start: index, category: line.inferedCategory.value });\n      }\n    });\n    if (songParts[songParts.length - 1]) {\n      songParts[songParts.length - 1].end = this.lines.length;\n    }\n    return songParts.flatMap((part) => {\n      const { start, end, category } = part;\n      if (end === undefined) {\n        return [];\n      }\n      return [\n        {\n          start,\n          end,\n          category,\n          lines: this.lines.slice(start, end).map(($0) => $0.text),\n        },\n      ];\n    });\n  }\n}\n\nfunction isCompleteSong(songParts: SongPart[]): boolean {\n  return songParts.filter(($0) => $0.category === LineCategory.body).length > 0;\n}\n","import { LineParser } from \"./LineParser\";\nimport { Slide, SlideConvertMethod, SongParser } from \"./SongParser\";\n\nfunction convertSlideToFormText(slide: Slide): string {\n  const { tag, body } = slide;\n  return [`[[${tag ?? \"\"}]]`, body || tag].join(\"\\n\");\n}\nfunction convertSongSlidesToFormText(slides: Slide[]): string {\n  return slides.map(convertSlideToFormText).join(\"\\n---\\n\");\n}\n\nexport class LyricParser {\n  lineParser: LineParser;\n  songParsers: SongParser[];\n  constructor(text: string) {\n    this.lineParser = new LineParser(text);\n    this.songParsers = this.lineParser.songs();\n  }\n\n  toFormText(\n    options: {\n      method?: SlideConvertMethod;\n      delimiter?: string;\n    } = {}\n  ): string {\n    return this.songParsers\n      .map(($0) => {\n        return convertSongSlidesToFormText($0.toSlides(options));\n      })\n      .join(\"\\n===\\n\");\n  }\n}\n","import React, { useRef } from \"react\";\nimport CSRFToken from \"api/CSRFToken\";\nimport { LyricParser } from \"parser/LyricParser\";\nimport { format, getDay } from \"date-fns\";\nimport { addDays } from \"date-fns/esm\";\nimport { Link } from \"react-router-dom\";\n\nconst example = `\n----------------------------\n@title: All to Jesus I Surrender (찬송가 내게있는모든것을) (C)\n@flow: V1 C V2 C C\n\nV1\nAll to Jesus I surrender,\nAll to Him I freely give\n\nI will ever love and trust Him,\nIn His presence daily live.\n\nC\nI surrender all,\nI surrender all.\n\nAll to Thee, my blessed Savior,\nI surrender all.\n\nV2\nAll to Jesus I surrender,\nHumbly at His feet I bow,\n\nWorldly pleasures all forsaken;\nTake me, Jesus, take me now.\n---------------------------\n\n다음은 규칙입니다.\n\n* 줄바꿈을 하면 슬라이드 내에서도 줄바꿈이 됩니다.\n\n* 두 줄 이상 띄우면 슬라이드가 구분됩니다.\n\n* 가사 앞에는 파트 태그를 붙일 수 있습니다. (V1, V, C, PC, 등등)\n\n* 아무 단어나 앞에 #을 붙여도 파트 태그로 인식합니다. (#CE, #Ending, 등등)\n\n* 파트 태그가 나오면 그 다음 파트 태그가 나오기 전까지의 가사가 그 파트에 속합니다.\n\n* @flow: 는 각 파트의 순서를 지정하는 줄로 여기서 지정한 파트 순서대로 슬라이드가 배치됩니다.\n\n* @flow: 줄 자체는 PPT에 들어가지 않습니다.\n\n* @title: 줄은 제목을 지정하는 줄로 이 줄이 있으면 새로운 곡의 시작으로 봅니다.\n\n* @title: 줄 자체는 PPT에 들어가지 않습니다.\n`;\n\nconst actionUrl = \"https://jjmean2.pythonanywhere.com/ppt_create/lyrics\";\n\nconst getFilename = (): string => {\n  const today = new Date();\n  // 0 is Sunday 6 is Saturday\n  const weekday = getDay(today);\n  const distanceToSunday = (7 - weekday) % 7;\n  const nextSunday = addDays(today, distanceToSunday);\n  const sundayText = format(nextSunday, \"yyyy-MM-dd\");\n  return \"테힐라 찬양 \" + sundayText;\n};\n\nfunction PPTCreateLegacy() {\n  const formRef = useRef<HTMLFormElement>(null);\n  const periodInputRef = useRef<HTMLInputElement>(null);\n  const delimiterInputRef = useRef<HTMLInputElement>(null);\n  const filenameInputRef = useRef<HTMLInputElement>(null);\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n  const hiddenBodyRef = useRef<HTMLInputElement>(null);\n  const filenameRef = useRef<HTMLInputElement>(null);\n  const handleButtonClick = (): void => {\n    if (\n      !formRef.current ||\n      !textAreaRef.current ||\n      !hiddenBodyRef.current ||\n      !filenameRef.current\n    ) {\n      return;\n    }\n    const value = textAreaRef.current?.value;\n    if (!value) {\n      return;\n    }\n    const parser = new LyricParser(value);\n    const formText = parser.toFormText({\n      delimiter: delimiterInputRef.current?.value || undefined,\n    });\n    if (!formText) {\n      alert(\"PPT로 만들 가사가 없습니다. 내용을 확인해주세요.\");\n      return;\n    }\n    hiddenBodyRef.current.value = formText;\n    filenameRef.current.value =\n      filenameInputRef.current?.value || getFilename();\n    console.log(formText);\n    formRef.current.submit();\n  };\n  return (\n    <div className=\"wrapper\">\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <div className=\"container\">\n          <a className=\"navbar-brand\" href=\"{% url 'lyrics' %}\">\n            가사 PPT 생성기\n          </a>\n          <Link className=\"navbar-brand\" to=\"experimental\">\n            실험 버전\n          </Link>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav mr-auto\">\n              <li className=\"nav-item active\"></li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n      <div className=\"container\">\n        <div className=\"App\">\n          <form\n            id=\"lyrics_form\"\n            name=\"lyrics_form\"\n            ref={formRef}\n            method=\"post\"\n            action={actionUrl}\n          >\n            <CSRFToken />\n            <input ref={hiddenBodyRef} type=\"hidden\" name=\"body\"></input>\n            <input ref={filenameRef} type=\"hidden\" name=\"filename\"></input>\n          </form>\n          <div className=\"page\">\n            <details className=\"option_detail\">\n              <summary>옵션</summary>\n              <div className=\"row\">\n                <div className=\"col-xs-2\">\n                  <label htmlFor=\"delimiter\">\n                    곡 마지막 슬라이드에 마침표 추가\n                  </label>\n                  <input\n                    ref={periodInputRef}\n                    id=\"period\"\n                    className=\"form-control\"\n                    placeholder=\"\"\n                    type=\"checkbox\"\n                  />\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-xs-2\">\n                  <label htmlFor=\"delimiter\">구분자: </label>\n                  <input\n                    ref={delimiterInputRef}\n                    id=\"delimiter\"\n                    className=\"form-control\"\n                    placeholder=\"/\"\n                    type=\"text\"\n                  />\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-xs-2\">\n                  <label htmlFor=\"filename\">파일명: </label>\n                  <input\n                    ref={filenameInputRef}\n                    id=\"filename\"\n                    className=\"form-control\"\n                    placeholder={getFilename()}\n                    type=\"text\"\n                  />\n                </div>\n              </div>\n            </details>\n            <br />\n            <div className=\"button-container\">\n              <button className=\"btn btn-primary\" onClick={handleButtonClick}>\n                제출\n              </button>\n            </div>\n            <div className=\"textAreaContainer\">\n              <textarea\n                className=\"form-control\"\n                ref={textAreaRef}\n                id=\"lyrics\"\n                placeholder={example}\n              ></textarea>\n              <div className=\"verticalLine66\" />\n              <div className=\"verticalLine90\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default PPTCreateLegacy;\n","export class FatalError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"FatalError\";\n  }\n}\n","import React, { ReactElement } from \"react\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport {\n  AppBar,\n  Button,\n  IconButton,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\n\ninterface Props {}\n\nfunction BasicAppBar(props: Props): ReactElement {\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <IconButton\n          edge=\"start\"\n          color=\"inherit\"\n          aria-label=\"menu\"\n          sx={{ mr: 2 }}\n        >\n          <MenuIcon />\n        </IconButton>\n        <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n          News\n        </Typography>\n        <Button color=\"inherit\">Login</Button>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nexport default BasicAppBar;\n","import { Box } from \"@material-ui/core\";\nimport React, { ReactElement } from \"react\";\nimport BasicAppBar from \"./BasicAppBar\";\n\nfunction asPage<P extends object>(\n  Component: React.ComponentType<P>\n): React.ComponentType<P> {\n  function PageComponent(props: P): ReactElement {\n    return (\n      <Box display=\"flex\" flexDirection=\"column\" height=\"100vh\">\n        <BasicAppBar />\n        <Box flexGrow={1}>\n          <Component {...props} />\n        </Box>\n      </Box>\n    );\n  }\n  PageComponent.displayName = `PageComponent(${\n    Component.displayName ?? Component.name\n  })`;\n  return PageComponent;\n}\n\nexport default asPage;\n","import { addDays, format, getDay } from \"date-fns\";\n\nexport const getDefaultPPTFilename = (): string => {\n  const today = new Date();\n  // 0 is Sunday 6 is Saturday\n  const weekday = getDay(today);\n  const distanceToSunday = (7 - weekday) % 7;\n  const nextSunday = addDays(today, distanceToSunday);\n  const sundayText = format(nextSunday, \"yyyy-MM-dd\");\n  return \"테힐라 찬양 \" + sundayText;\n};\n","import React, { ReactElement, useRef } from \"react\";\nimport { Box, Button } from \"@material-ui/core\";\nimport { experimentalStyled as styled } from \"@material-ui/core/styles\";\nimport { FatalError } from \"error/FatalError\";\nimport asPage from \"views/common/asPage\";\nimport { useCreatePPT } from \"./useCreatePPT\";\nimport { getDefaultPPTFilename } from \"./util\";\n\nconst TextArea = styled(\"textarea\")``;\n\nfunction PPTGenerator(): ReactElement {\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n  const { createPPT, hiddenPPTCreateFormElement } = useCreatePPT();\n\n  const handleClickSubmit = (): void => {\n    try {\n      createPPT({\n        filename: getDefaultPPTFilename(),\n        lyricText: \"\",\n      });\n    } catch (error: unknown) {\n      if (error instanceof FatalError) {\n        console.error(error);\n      } else if (error instanceof Error) {\n        alert(error.message);\n      } else {\n        console.log(error);\n      }\n    }\n  };\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" height=\"100%\" p={2}>\n      <Box>\n        <Button onClick={handleClickSubmit}>제출</Button>\n      </Box>\n      <Box display=\"flex\" flexGrow={1}>\n        <TextArea\n          ref={textAreaRef}\n          sx={{\n            flexGrow: 1,\n            alignItems: \"stretch\",\n          }}\n          placeholder=\"가사를 입력해주세요\"\n        />\n      </Box>\n      {hiddenPPTCreateFormElement}\n    </Box>\n  );\n}\n\nexport default asPage(PPTGenerator);\n","import React, { useCallback, useRef } from \"react\";\nimport CSRFToken from \"api/CSRFToken\";\nimport { LyricParser } from \"parser/LyricParser\";\nimport { FatalError } from \"error/FatalError\";\n\nconst actionUrl = \"https://jjmean2.pythonanywhere.com/ppt_create/lyrics\";\n\nexport function useCreatePPT(): typeof api {\n  const formRef = useRef<HTMLFormElement>(null);\n  const inputBodyRef = useRef<HTMLInputElement>(null);\n  const inputFilenameRef = useRef<HTMLInputElement>(null);\n\n  const formElement = (\n    <form\n      id=\"lyrics_form\"\n      name=\"lyrics_form\"\n      ref={formRef}\n      method=\"post\"\n      action={actionUrl}\n    >\n      <CSRFToken />\n      <input ref={inputBodyRef} type=\"hidden\" name=\"body\"></input>\n      <input ref={inputFilenameRef} type=\"hidden\" name=\"filename\"></input>\n    </form>\n  );\n\n  const createPPT = useCallback(\n    (params: {\n      filename: string;\n      lyricText: string;\n      options?: {\n        delimiter?: string;\n      };\n    }) => {\n      if (\n        inputBodyRef.current === null ||\n        inputFilenameRef.current === null ||\n        formRef.current === null\n      ) {\n        throw new FatalError(\"formElement가 mount 되지 않았습니다.\");\n      }\n      const { filename, lyricText, options = {} } = params;\n      if (!lyricText) {\n        throw new Error(\"PPT로 만들 가사가 없습니다. 내용을 확인해주세요\");\n      }\n      const parser = new LyricParser(lyricText);\n      const body = parser.toFormText(options);\n      if (!body) {\n        throw new Error(\"PPT로 만들 가사가 없습니다. 내용을 확인해주세요\");\n      }\n\n      inputBodyRef.current.value = body;\n      inputFilenameRef.current.value = filename || \"untitled\";\n      formRef.current.submit();\n    },\n    []\n  );\n\n  const api = {\n    createPPT,\n    hiddenPPTCreateFormElement: formElement,\n  };\n  return api;\n}\n","import React, { ReactElement } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport PPTCreateLegacy from \"views/PPTCreatLegacy\";\nimport PPTGenerator from \"views/PPTGenerator\";\n\nfunction Routes(): ReactElement {\n  return (\n    <Switch>\n      <Route exact path=\"/\">\n        <PPTCreateLegacy />\n      </Route>\n      <Route exact path=\"/experimental\">\n        <PPTGenerator />\n      </Route>\n    </Switch>\n  );\n}\n\nexport default Routes;\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport Routes from \"Routes\";\n\nfunction App() {\n  return (\n    <Router basename=\"/ppt_create\">\n      <Routes />\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}