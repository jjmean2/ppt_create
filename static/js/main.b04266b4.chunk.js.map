{"version":3,"sources":["api/CSRFToken.tsx","parser/SongParser.ts","parser/LineParser.ts","parser/LyricParser.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["axios","defaults","xsrfCookieName","xsrfHeaderName","CSRFToken","SlideConvertMethod","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","replace","substring","decodeURIComponent","getCookie","type","value","convertBodyToSlide","body","tag","lines","merged","join","map","slideBody","LineCategory","SongParser","songParts","currentTag","title","flow","linkUrl","bodys","tagBodyMap","Map","bodysWithNoTag","comments","part","category","undefined","this","logDiscard","toUpperCase","console","error","slice","lastBody","concat","push","comment","filter","$0","log","flatMap","lineJoiner","Array","toSlideBodyOrder","flowTokens","splitAsTokens","usedTokens","slidesFromFlowTokens","token","taggedBody","get","slidesFromUnusedTaggedBodys","includes","slidesFromUntaggedBodys","method","withBodyOrder","withFlowOrder","toSlideFlowOrder","tagPatterns","flowTokenPatterns","isFlowToken","arg","some","pattern","test","separatorPatterns","scoreRange","titleSections","categoryScorer","empty","text","date","score","tokens","Math","ceil","separator","Line","inferedCategory","categories","$enum","getValues","reduce","result","current","checker","unknown","LineParser","songsCache","done","trim","lastLine","getKeyOrDefault","getSongParts","songs","startIndexOfSong","processedLineIndex","from","entries","currentIndex","currentPart","previousParts","isCompleteSong","firstBodyIndexAfterThis","findIndex","Number","MAX_SAFE_INTEGER","categoriesInTitleSection","remainingParts","forEach","line","index","last","start","end","convertSlideToFormText","slide","convertSongSlidesToFormText","slides","LyricParser","lineParser","songParsers","toSlides","App","formRef","useRef","textAreaRef","hiddenBodyRef","filenameRef","className","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","ref","action","onClick","formText","toFormText","today","Date","distanceToSunday","getDay","nextSunday","addDays","format","getFilename","submit","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"yOAGAA,IAAMC,SAASC,eAAiB,YAChCF,IAAMC,SAASE,eAAiB,cAwBjBC,ICQHC,EDRGD,EAPf,WACE,IAAME,EAhBR,SAAmBC,GACjB,IAAIC,EAAc,KAClB,GAAIC,SAASC,QAA8B,KAApBD,SAASC,OAE9B,IADA,IAAIC,EAAUF,SAASC,OAAOE,MAAM,KAC3BC,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,IAAK,CACvC,IAAIH,EAASC,EAAQE,GAAGE,QAAQ,IAAK,IAErC,GAAIL,EAAOM,UAAU,EAAGT,EAAKO,OAAS,KAAOP,EAAO,IAAK,CACvDC,EAAcS,mBAAmBP,EAAOM,UAAUT,EAAKO,OAAS,IAChE,OAIN,OAAON,EAGWU,CAAU,aAC5B,OACE,uBAAOC,KAAK,SAASZ,KAAK,sBAAsBa,MAAK,OAAEd,QAAF,IAAEA,IAAa,M,qCCTxE,SAASe,EAAmBC,GAAoC,IACtDC,EAAeD,EAAfC,IAAKC,EAAUF,EAAVE,MACPC,EAASD,EAAME,KAAK,KAC1B,OAAOD,EAAOb,MAAM,MAAMe,KAAI,SAACC,GAAD,MAAgB,CAC5CL,IAAKA,EACLD,KAAMM,EAAUb,QAAQ,MAAO,W,SAgBvBV,O,iCAAAA,I,kCAAAA,M,KAUL,I,EC1CKwB,ED0CCC,EAAb,WAuBE,WAAmBC,GACjB,IAAIC,EADqC,yBAAxBD,YAAuB,KAtB1CE,WAsB0C,OArB1CC,UAqB0C,OApB1CC,aAoB0C,OAnB1CC,MAAgB,GAmB0B,KAlB1CC,WAAa,IAAIC,IAkByB,KAjB1CC,eAAyB,GAiBiB,KAhB1CC,SAAqB,GAgBqB,oBAErBT,GAFqB,IAExC,2BAA8B,CAAC,IAApBU,EAAmB,QAgC5B,GA/BIA,EAAKC,WAAab,EAAaI,QACjCD,OAAaW,OACMA,IAAfC,KAAKX,MACPW,KAAKX,MAAQQ,EAAKjB,MAAME,KAAK,MAE7BkB,KAAKC,WAAW,QAASJ,IAGzBA,EAAKC,WAAab,EAAaK,OACjCF,OAAaW,OACKA,IAAdC,KAAKV,KACPU,KAAKV,KAAOO,EAAKjB,MAAME,KAAK,KAE5BkB,KAAKC,WAAW,OAAQJ,EAAM,MAG9BA,EAAKC,WAAab,EAAaM,UACjCH,OAAaW,OACQA,IAAjBC,KAAKT,QACPS,KAAKT,QAAUM,EAAKjB,MAAME,KAAK,MAE/BkB,KAAKC,WAAW,UAAWJ,IAG3BA,EAAKC,WAAab,EAAaN,MACjCS,EAAaS,EAAKjB,MAAM,GAAGsB,oBAAiBH,EAC5CI,QAAQC,MAAM,kBAAmBhB,GAC7BS,EAAKjB,MAAMV,OAAS,GACtB8B,KAAKC,WAAW,MAAOJ,EAAKjB,MAAMyB,MAAM,GAAI,OAG5CR,EAAKC,WAAab,EAAaP,KAAM,CACvCyB,QAAQC,MAAM,uBAAwBhB,GACtC,IAAMkB,EAAWN,KAAKR,MAAMQ,KAAKR,MAAMtB,OAAS,GAC5CoC,GAAYlB,GAAckB,EAAS3B,MAAQS,EAC7CkB,EAAS1B,MAAQ0B,EAAS1B,MAAM2B,OAAOV,EAAKjB,OAE5CoB,KAAKR,MAAMgB,KAAK,CAAE7B,IAAKS,EAAYR,MAAOiB,EAAKjB,QAG/CiB,EAAKC,WAAab,EAAawB,SACjCT,KAAKJ,SAASY,KAAKX,EAAKjB,MAAME,KAAK,QA5CC,8BAgDxCkB,KAAKL,eAAiBK,KAAKR,MAAMkB,QAAO,SAACC,GAAD,YAAmBZ,IAAXY,EAAGhC,OACnDwB,QAAQS,IAAI,kBAAmBZ,KAAKL,gBACpCK,KAAKP,WAAa,IAAIC,IACpBM,KAAKR,MACFqB,SAAQ,gBAAGlC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,MAAR,OAAqBD,EAAM,CAAC,CAAEA,MAAKC,UAAW,MACtDG,KAAI,SAAC4B,GAAD,MAAQ,CAACA,EAAGhC,IAAKgC,OA5E9B,8CASE,SACEpC,EACAsB,GAEC,IADDiB,EACA,uDADa,KAETjB,aAAgBkB,MAClBZ,QAAQC,MAAR,UAAiB7B,EAAjB,kBAA+BsB,EAA/B,mBAEAM,QAAQC,MAAR,UACK7B,EADL,kBACmBsB,EAAKjB,MAAME,KAAKgC,GADnC,qBAjBN,8BAgFE,WACE,OAAOd,KAAKR,MAAMqB,SAAQ,SAACF,GAAD,OAAQlC,EAAmBkC,QAjFzD,8BAoFE,WAA6B,IAAD,OAC1B,QAAkBZ,IAAdC,KAAKV,KACP,OAAOU,KAAKgB,mBAEd,IAAMC,EAAaC,EAAclB,KAAKV,MAAMP,KAAI,SAAC4B,GAAD,OAAQA,EAAGT,iBACrDiB,EAAa,GAWbC,EAVQH,EAAWlC,KAAI,SAACsC,GAC5B,GAAIA,EAAO,CACT,IAAMC,EAAa,EAAK7B,WAAW8B,IAAIF,GACvC,GAAIC,EAEF,OADAH,EAAWX,KAAKa,GACTC,EAGX,OAAOD,KAEmCR,SAAQ,SAACnC,GACnD,MAAoB,kBAATA,EACF,CAAC,CAAEC,IAAKD,EAAMA,KAAM,KAEpBD,EAAmBC,MAGxB8C,EAA8BxB,KAAKR,MACtCkB,QAAO,SAACC,GAAD,OAAQA,EAAGhC,MAAQwC,EAAWM,SAASd,EAAGhC,QACjDkC,SAAQ,SAACF,GAAD,OAAQlC,EAAmBkC,MAChCe,EAA0B1B,KAAKL,eAAekB,SAAQ,SAACF,GAAD,OAC1DlC,EAAmBkC,MAErB,OAAOS,EACJb,OAAOiB,GACPjB,OAAOmB,KAnHd,sBAsHE,WAEY,IADVC,EACS,uDADoBlE,EAAmBmE,cAEhD,OAAQD,GACN,KAAKlE,EAAmBoE,cACtB,OAAO7B,KAAK8B,mBACd,KAAKrE,EAAmBmE,cAExB,QACE,OAAO5B,KAAKgB,sBA/HpB,sBAmIE,WACE,MAAM,oBAAN,OACUhB,KAAKX,MADf,2BAESW,KAAKV,KAFd,8BAGYU,KAAKT,QAHjB,4BAIUS,KAAKR,MACVT,KAAI,gBAAGJ,EAAH,EAAGA,IAAKC,EAAR,EAAQA,MAAR,iBAAwBD,EAAxB,cAAiCC,EAAME,KAAK,UAChDA,KAAK,QANV,iCAOekB,KAAKP,WAPpB,qCAQmBO,KAAKL,eARxB,+BASaK,KAAKJ,SATlB,cApIJ,K,kBC1CYX,O,iBAAAA,I,qBAAAA,I,aAAAA,I,eAAAA,I,iBAAAA,I,qBAAAA,I,eAAAA,I,eAAAA,I,yBAAAA,I,sBAAAA,M,KAaZ,IAAM8C,EAAc,CAClB,UACA,YACA,UACA,eACA,iBAGWC,EAAiB,UAAOD,EAAP,CAAoB,SAAU,mBAC/CE,EAAc,SAACC,GAAD,OACzBF,EAAkBG,MAAK,SAACC,GAAD,OAAaA,EAAQC,KAAKH,OACtChB,EAAgB,SAACgB,GAAD,OAC3BA,EAAIlE,MAAM,SAAS0C,QAAO,SAACC,GAAD,MAAQ,KAAK0B,KAAK1B,OAExC2B,EAAoB,CAAC,uBAGrBC,EACK,EADLA,EAES,EAGTC,EAAgB,CACpBvD,EAAaI,MACbJ,EAAaK,KACbL,EAAaM,SAITkD,GAAqD,mBACxDxD,EAAayD,OAAQ,SAACC,GAAD,MACX,KAATA,EAAcJ,EAAqBA,KAFoB,cAGxDtD,EAAa2D,MAAO,SAACD,OAHmC,cAIxD1D,EAAaI,OAAQ,SAACsD,GACrB,IAAIE,EAAQ,EAUZ,MATI,OAAOR,KAAKM,KACdE,GAAS,GAEP,UAAUR,KAAKM,KACjBE,GAAS,GAEP,cAAcR,KAAKM,KACrBE,GAAS,GAEJA,KAfgD,cAiBxD5D,EAAaM,SAAU,SAACoD,GAAD,MACtB,kBAAkBN,KAAKM,GAAQJ,EAAqBA,KAlBG,cAmBxDtD,EAAaK,MAAO,SAACqD,GACpB,IAAMG,EAAS5B,EAAcyB,GAC7B,GAAsB,IAAlBG,EAAO5E,OACT,OAAOqE,EAET,IAAMtB,EAAa6B,EAAOpC,OAAOuB,GACjC,OAAOc,KAAKC,KAAM,EAAI/B,EAAW/C,OAAU4E,EAAO5E,WAzBK,cA2BxDe,EAAaN,KAAM,SAACgE,GACnB,OAlDWT,EAkDDS,EAlDiBZ,EAAYI,MAAK,SAACC,GAAD,OAAaA,EAAQC,KAAKH,MAmD7DK,EAEL,kBAAkBF,KAAKM,GAClB,OADT,EArDU,IAACT,KAsB4C,cAmCxDjD,EAAaP,MAAO,SAACiE,GACpB,MAAI,kBAAkBN,KAAKM,GAClB,EAEF,KAvCgD,cAyCxD1D,EAAawB,SAAU,SAACkC,GACvB,MAAI,mBAASN,KAAKM,GACT,EAEF,KA7CgD,cA+CxD1D,EAAagE,WAAY,SAACN,GAAD,OA7DPT,EA8DLS,EA7DdL,EAAkBH,MAAK,SAACC,GAAD,OAAaA,EAAQC,KAAKH,MA6D3BK,EAAqBA,EA9DzB,IAACL,KAcsC,GAmDrDgB,EAKJ,WAAmBP,GAAe,IAAD,2BAAdA,OAAc,KAJjCQ,qBAIiC,EAC/B,IAAMC,EAAaC,YAAMpE,GAAcqE,YACvCtD,KAAKmD,gBAAL,UAAuBC,EAAWG,QAAO,SAACC,EAAQC,GAAa,IAAD,EAC5D,IAAU,OAAND,QAAM,IAANA,OAAA,EAAAA,EAAQX,SAAUN,EACpB,OAAOiB,EAET,IAAME,EAAUjB,EAAegB,GACzBZ,EAAK,OAAGa,QAAH,IAAGA,OAAH,EAAGA,EAAUf,GACxB,YAAc5C,IAAV8C,GAAuBA,GAAK,iBAAIW,QAAJ,IAAIA,OAAJ,EAAIA,EAAQX,aAAZ,SAAsB,GAC7C,CAAErE,MAAOiF,EAASZ,MAAOA,GAE3BW,SACNzD,UAVH,QAUuE,CACrEvB,MAAOS,EAAa0E,QACpBd,MAAO,IAKAe,EAAb,WAIE,WAAYjB,GAAe,yBAH3B/D,WAG0B,OAFlBiF,gBAEkB,OAD1BC,MAAO,EAEL9D,KAAKpB,MAAQ+D,EACVoB,OACA/F,MAAM,MACNe,KAAI,SAAC4B,GAAD,OAAQA,EAAGoD,UACfR,QAAO,SAACC,EAAQC,GAAa,IAAD,EACrBO,EAAQ,UAAGR,EAAOA,EAAOtF,OAAS,UAA1B,QAAgC,GAI9C,MAHkB,KAAZuF,GAAoC,KAAlBO,EAASrB,MAC/Ba,EAAOhD,KAAK,IAAI0C,EAAKO,IAEhBD,IACN,IACLrD,QAAQS,IACNZ,KAAKpB,MAAMG,KAAI,SAAC4B,GAAD,MAAS,CACtBgC,KAAMhC,EAAGgC,KACT7C,SAAUuD,YAAMpE,GAAcgF,gBAAgBtD,EAAGwC,gBAAgB3E,YAnBzE,yCAwBE,WACE,GAAIwB,KAAK6D,WACP,OAAO7D,KAAK6D,WAOd,IALA,IAAM1E,EAAYa,KAAKkE,eACjBC,EAAsB,GAExBC,EAAmB,EACnBC,EAAqB,EACzB,MAA0CtD,MAAMuD,KAAKnF,EAAUoF,WAA/D,eAA2E,CAAC,IAAD,sBAA/DC,EAA+D,KAAjDC,EAAiD,KACzE,KAAID,GAAgBH,GAGpB,GAAII,EAAY3E,WAAab,EAAagE,UAAW,CACnD,IAAMyB,EAAgBvF,EAAUkB,MAAM+D,EAAkBI,GACpDG,EAAeD,KACjBP,EAAM3D,KAAKkE,GACXN,EAAmBI,QAEhB,GAAIhC,EAAcf,SAASgD,EAAY3E,UAAW,CACvD,IAAM8E,EAA0BzF,EAC7BkB,MAAMmE,GACNK,WAAU,SAAClE,GAAD,OAAQA,EAAGb,WAAab,EAAaP,QAClD,IAAiC,IAA7BkG,EACFP,EAAqBS,OAAOC,qBACvB,CACLV,EAAqBO,EACrB,IAAMI,EAA2B7F,EAC9BkB,MAAMmE,EAAcA,EAAeI,GACnC7F,KAAI,SAAC4B,GAAD,OAAQA,EAAGb,YAClB,GACEkF,EAAyBvD,SAASxC,EAAaI,QAC/C2F,EAAyBvD,SAASxC,EAAaK,OAC/C0F,EAAyBvD,SAASxC,EAAaM,SAC/C,CACA,IAAMmF,EAAgBvF,EAAUkB,MAC9B+D,EACAI,GAEEG,EAAeD,KACjBP,EAAM3D,KAAKkE,GACXN,EAAmBI,MAM7B,IAAMS,EAAiB9F,EAAUkB,MAAM+D,GAMvC,OALIO,EAAeM,IACjBd,EAAM3D,KAAKyE,GAGbjF,KAAK6D,WAAaM,EAAMpF,KAAI,SAAC4B,GAAD,OAAQ,IAAIzB,EAAWyB,MAC5CX,KAAK6D,aA7EhB,0BAgFE,WAA4B,IAAD,OACnB1E,EAAY,GAalB,OAZAa,KAAKpB,MAAMsG,SAAQ,SAACC,EAAMC,GACxB,IAAMC,EAAOlG,EAAUA,EAAUjB,OAAS,QAC7B6B,IAATsF,EACFlG,EAAUqB,KAAK,CAAE8E,MAAOF,EAAOtF,SAAUqF,EAAKhC,gBAAgB3E,QACrD6G,EAAKvF,WAAaqF,EAAKhC,gBAAgB3E,QAChD6G,EAAKE,IAAMH,EACXjG,EAAUqB,KAAK,CAAE8E,MAAOF,EAAOtF,SAAUqF,EAAKhC,gBAAgB3E,YAG9DW,EAAUA,EAAUjB,OAAS,KAC/BiB,EAAUA,EAAUjB,OAAS,GAAGqH,IAAMvF,KAAKpB,MAAMV,QAE5CiB,EAAU0B,SAAQ,SAAChB,GAAU,IAC1ByF,EAAyBzF,EAAzByF,MAAOC,EAAkB1F,EAAlB0F,IAAKzF,EAAaD,EAAbC,SACpB,YAAYC,IAARwF,EACK,GAEF,CACL,CACED,QACAC,MACAzF,WACAlB,MAAO,EAAKA,MAAMyB,MAAMiF,EAAOC,GAAKxG,KAAI,SAAC4B,GAAD,OAAQA,EAAGgC,iBAxG7D,KA+GA,SAASgC,EAAexF,GACtB,OAAOA,EAAUuB,QAAO,SAACC,GAAD,OAAQA,EAAGb,WAAab,EAAaP,QAAMR,OAAS,ECtO9E,SAASsH,EAAuBC,GAAuB,IAC7C9G,EAAc8G,EAAd9G,IAAKD,EAAS+G,EAAT/G,KACb,MAAO,CAAC,KAAD,cAAMC,QAAN,IAAMA,IAAO,GAAb,MAAqBD,GAAQC,GAAKG,KAAK,MAEhD,SAAS4G,EAA4BC,GACnC,OAAOA,EAAO5G,IAAIyG,GAAwB1G,KAAK,WAG1C,IAAM8G,EAAb,WAGE,WAAYjD,GAAe,yBAF3BkD,gBAE0B,OAD1BC,iBAC0B,EACxB9F,KAAK6F,WAAa,IAAIjC,EAAWjB,GACjC3C,KAAK8F,YAAc9F,KAAK6F,WAAW1B,QALvC,8CAQE,WAAmF,IAAxExC,EAAuE,uDAA1ClE,EAAmBoE,cACzD,OAAO7B,KAAK8F,YACT/G,KAAI,SAAA4B,GACH,OAAO+E,EAA4B/E,EAAGoF,SAASpE,OAEhD7C,KAAK,eAbZ,K,wBC+FekH,MAtFf,WACE,IAAMC,EAAUC,iBAAwB,MAClCC,EAAcD,iBAA4B,MAC1CE,EAAgBF,iBAAyB,MACzCG,EAAcH,iBAAyB,MAqB7C,OACE,sBAAKI,UAAU,UAAf,UACE,qBAAKA,UAAU,gDAAf,SACE,sBAAKA,UAAU,YAAf,UACE,mBAAGA,UAAU,eAAeC,KAAK,qBAAjC,iDAGA,wBACED,UAAU,iBACV/H,KAAK,SACLiI,cAAY,WACZC,cAAY,0BACZC,gBAAc,yBACdC,gBAAc,QACdC,aAAW,oBAPb,SASE,sBAAMN,UAAU,0BAGlB,qBAAKA,UAAU,2BAA2BO,GAAG,yBAA7C,SACE,oBAAIP,UAAU,qBAAd,SACE,oBAAIA,UAAU,kBAAd,SACE,mBAAGA,UAAU,WAAWC,KAAK,qBAA7B,kDAQV,qBAAKD,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,uBACEO,GAAG,cACHlJ,KAAK,cACLmJ,IAAKb,EACLtE,OAAO,OACPoF,OA3EM,uDAsER,UAOE,cAAC,EAAD,IACA,uBAAOD,IAAKV,EAAe7H,KAAK,SAASZ,KAAK,SAC9C,uBAAOmJ,IAAKT,EAAa9H,KAAK,SAASZ,KAAK,gBAE9C,sBAAK2I,UAAU,OAAf,UACE,qBAAKA,UAAU,mBAAf,SACE,wBAAQA,UAAU,kBAAkBU,QAjEtB,WAAa,IAAD,EACpC,GACGf,EAAQxC,SACR0C,EAAY1C,SACZ2C,EAAc3C,SACd4C,EAAY5C,QAJf,CAQA,IAAMjF,EAAK,UAAG2H,EAAY1C,eAAf,aAAG,EAAqBjF,MACnC,GAAKA,EAAL,CAGA,IACMyI,EADS,IAAIrB,EAAYpH,GACP0I,aACxBd,EAAc3C,QAAQjF,MAAQyI,EAC9BZ,EAAY5C,QAAQjF,MA/BJ,WAClB,IAAM2I,EAAQ,IAAIC,KAGZC,GAAoB,EADVC,YAAOH,IACkB,EACnCI,EAAaC,YAAQL,EAAOE,GAElC,MAAO,mCADYI,YAAOF,EAAY,cAyBRG,GAC5BvH,QAAQS,IAAIqG,GACZhB,EAAQxC,QAAQkE,YA+CN,4BAIF,0BACErB,UAAU,eACVQ,IAAKX,EACLU,GAAG,mBAIJ,QCvFEe,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1K,SAAS2K,eAAe,SAM1BZ,M","file":"static/js/main.b04266b4.chunk.js","sourcesContent":["import React, { ReactElement } from \"react\";\nimport axios from \"axios\";\n\naxios.defaults.xsrfCookieName = \"csrftoken\";\naxios.defaults.xsrfHeaderName = \"X-CSRFToken\";\n\nfunction getCookie(name: string): string | null {\n  var cookieValue = null;\n  if (document.cookie && document.cookie !== \"\") {\n    var cookies = document.cookie.split(\";\");\n    for (var i = 0; i < cookies.length; i++) {\n      var cookie = cookies[i].replace(\" \", \"\");\n      //var cookie = jQuery.trim(cookies[i]); 당신이 만약 jQuery를 사용한다면, 위 코드 대신 이 코드를 사용하여도 좋다\n      if (cookie.substring(0, name.length + 1) === name + \"=\") {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n  return cookieValue;\n}\nfunction CSRFToken(): ReactElement {\n  const csrftoken = getCookie(\"csrftoken\");\n  return (\n    <input type=\"hidden\" name=\"csrfmiddlewaretoken\" value={csrftoken ?? \"\"} />\n  );\n}\n\nexport default CSRFToken;\n","import { LineCategory, splitAsTokens } from \"./LineParser\";\n\nfunction splitArrayBySize<T>(array: T[], size: number): T[][] {\n  const result = [] as T[][];\n  for (const element of array) {\n    const last = result[result.length - 1];\n    if (last && last.length < size) {\n      last.push(element);\n    } else {\n      result.push([element]);\n    }\n  }\n  return result;\n}\n\nfunction convertBodyToSlide(body: Body, lineSize = 2): Slide[] {\n  const { tag, lines } = body;\n  const merged = lines.join(\"/\");\n  return merged.split(\"//\").map((slideBody) => ({\n    tag: tag,\n    body: slideBody.replace(/\\//g, \"\\n\"),\n  }));\n}\n\nexport type SongPart = {\n  start: number;\n  end: number;\n  category: LineCategory;\n  lines: string[];\n};\n\nexport type Body = {\n  tag?: string;\n  lines: string[];\n};\n\nexport enum SlideConvertMethod {\n  withFlowOrder,\n  withBodyOrder,\n}\n\nexport type Slide = {\n  tag?: string;\n  body: string;\n};\n\nexport class SongParser {\n  title?: string;\n  flow?: string;\n  linkUrl?: string;\n  bodys: Body[] = [];\n  tagBodyMap = new Map<string, Body>();\n  bodysWithNoTag: Body[] = [];\n  comments: string[] = [];\n\n  private logDiscard(\n    type: string,\n    part: SongPart | string[],\n    lineJoiner = \"\\n\"\n  ) {\n    if (part instanceof Array) {\n      console.error(`${type} part (${part}) is discarded`);\n    } else {\n      console.error(\n        `${type} part (${part.lines.join(lineJoiner)}) is discarded`\n      );\n    }\n  }\n\n  constructor(public songParts: SongPart[]) {\n    let currentTag: string | undefined;\n    for (const part of songParts) {\n      if (part.category === LineCategory.title) {\n        currentTag = undefined;\n        if (this.title === undefined) {\n          this.title = part.lines.join(\"\\n\");\n        } else {\n          this.logDiscard(\"title\", part);\n        }\n      }\n      if (part.category === LineCategory.flow) {\n        currentTag = undefined;\n        if (this.flow === undefined) {\n          this.flow = part.lines.join(\" \");\n        } else {\n          this.logDiscard(\"flow\", part, \" \");\n        }\n      }\n      if (part.category === LineCategory.linkUrl) {\n        currentTag = undefined;\n        if (this.linkUrl === undefined) {\n          this.linkUrl = part.lines.join(\"\\n\");\n        } else {\n          this.logDiscard(\"linkUrl\", part);\n        }\n      }\n      if (part.category === LineCategory.tag) {\n        currentTag = part.lines[0].toUpperCase() || undefined;\n        console.error(\"set current tag\", currentTag);\n        if (part.lines.length > 1) {\n          this.logDiscard(\"tag\", part.lines.slice(1), \", \");\n        }\n      }\n      if (part.category === LineCategory.body) {\n        console.error(\"current tag for body\", currentTag);\n        const lastBody = this.bodys[this.bodys.length - 1];\n        if (lastBody && currentTag && lastBody.tag === currentTag) {\n          lastBody.lines = lastBody.lines.concat(part.lines);\n        } else {\n          this.bodys.push({ tag: currentTag, lines: part.lines });\n        }\n      }\n      if (part.category === LineCategory.comment) {\n        this.comments.push(part.lines.join(\"\\n\"));\n      }\n    }\n\n    this.bodysWithNoTag = this.bodys.filter(($0) => $0.tag === undefined);\n    console.log(\"bodysWith NoTag\", this.bodysWithNoTag);\n    this.tagBodyMap = new Map(\n      this.bodys\n        .flatMap(({ tag, lines }) => (tag ? [{ tag, lines }] : []))\n        .map(($0) => [$0.tag, $0])\n    );\n  }\n\n  toSlideBodyOrder(): Slide[] {\n    return this.bodys.flatMap(($0) => convertBodyToSlide($0));\n  }\n\n  toSlideFlowOrder(): Slide[] {\n    if (this.flow === undefined) {\n      return this.toSlideBodyOrder();\n    }\n    const flowTokens = splitAsTokens(this.flow).map(($0) => $0.toUpperCase());\n    const usedTokens = [] as string[];\n    const bodys = flowTokens.map((token) => {\n      if (token) {\n        const taggedBody = this.tagBodyMap.get(token);\n        if (taggedBody) {\n          usedTokens.push(token);\n          return taggedBody;\n        }\n      }\n      return token;\n    });\n    const slidesFromFlowTokens: Slide[] = bodys.flatMap((body) => {\n      if (typeof body === \"string\") {\n        return [{ tag: body, body: \"\" }];\n      } else {\n        return convertBodyToSlide(body);\n      }\n    });\n    const slidesFromUnusedTaggedBodys = this.bodys\n      .filter(($0) => $0.tag && !usedTokens.includes($0.tag))\n      .flatMap(($0) => convertBodyToSlide($0));\n    const slidesFromUntaggedBodys = this.bodysWithNoTag.flatMap(($0) =>\n      convertBodyToSlide($0)\n    );\n    return slidesFromFlowTokens\n      .concat(slidesFromUnusedTaggedBodys)\n      .concat(slidesFromUntaggedBodys);\n  }\n\n  toSlides(\n    method: SlideConvertMethod = SlideConvertMethod.withBodyOrder\n  ): Slide[] {\n    switch (method) {\n      case SlideConvertMethod.withFlowOrder:\n        return this.toSlideFlowOrder();\n      case SlideConvertMethod.withBodyOrder:\n        return this.toSlideBodyOrder();\n      default:\n        return this.toSlideBodyOrder();\n    }\n  }\n\n  toString(): string {\n    return `\n\t\t\t* title: ${this.title}\n\t\t\t* flow: ${this.flow}\n\t\t\t* linkUrl: ${this.linkUrl}\n\t\t\t* bodys: ${this.bodys\n        .map(({ tag, lines }) => `[${tag}]\\n${lines.join(\"\\n\")}`)\n        .join(\"\\n\\n\")}\n\t\t\t* tagBodyMap: ${this.tagBodyMap}\n\t\t\t* bodysWithNoTag: ${this.bodysWithNoTag}\n\t\t\t* comments: ${this.comments}\n\t\t`;\n  }\n}\n","import { SongParser, SongPart } from \"./SongParser\";\nimport { $enum } from \"ts-enum-util\";\nimport { Optional } from \"utility-types\";\n\nexport enum LineCategory {\n  empty,\n  linkUrl,\n  tag,\n  flow,\n  title,\n  comment,\n  body,\n  date,\n  separator,\n  unknown,\n}\n\nconst tagPatterns = [\n  /^V\\d?$/i,\n  /^P?C\\d?$/i,\n  /^B\\d?$/i,\n  /^E(nding)?$/i,\n  /^\\[[A-Z]+\\]$/i,\n];\nconst isTag = (arg: string) => tagPatterns.some((pattern) => pattern.test(arg));\nexport const flowTokenPatterns = [...tagPatterns, /^x\\d$/i, /^간주$/];\nexport const isFlowToken = (arg: string): boolean =>\n  flowTokenPatterns.some((pattern) => pattern.test(arg));\nexport const splitAsTokens = (arg: string): string[] =>\n  arg.split(/[\\W_]/).filter(($0) => /\\w/.test($0));\n\nconst separatorPatterns = [/^[-=*][-=* ]+[-=*]$/];\nconst isSeparator = (arg: string) =>\n  separatorPatterns.some((pattern) => pattern.test(arg));\nconst scoreRange = {\n  certain: 5,\n  notPossible: 0,\n};\n\nconst titleSections = [\n  LineCategory.title,\n  LineCategory.flow,\n  LineCategory.linkUrl,\n];\n\ntype Scorer = (text: string) => number | undefined;\nconst categoryScorer: Partial<Record<LineCategory, Scorer>> = {\n  [LineCategory.empty]: (text) =>\n    text === \"\" ? scoreRange.certain : scoreRange.notPossible,\n  [LineCategory.date]: (text) => undefined,\n  [LineCategory.title]: (text) => {\n    let score = 0;\n    if (/^\\d./.test(text)) {\n      score += 2;\n    }\n    if (/\\(\\w\\)$/.test(text)) {\n      score += 2;\n    }\n    if (/\\(\\w->\\w\\)$/.test(text)) {\n      score += 1;\n    }\n    return score;\n  },\n  [LineCategory.linkUrl]: (text) =>\n    /^https?:\\/\\/.*$/.test(text) ? scoreRange.certain : scoreRange.notPossible,\n  [LineCategory.flow]: (text) => {\n    const tokens = splitAsTokens(text);\n    if (tokens.length === 1) {\n      return scoreRange.notPossible;\n    }\n    const flowTokens = tokens.filter(isFlowToken);\n    return Math.ceil((5 * flowTokens.length) / tokens.length);\n  },\n  [LineCategory.tag]: (text) => {\n    if (isTag(text)) {\n      return scoreRange.certain;\n    }\n    if (/^[A-Z]{,2}\\d?$/i.test(text)) {\n      return 3;\n    }\n  },\n  [LineCategory.body]: (text) => {\n    if (/^[\\w,\"'.)( ]+$/i.test(text)) {\n      return 2;\n    }\n    return 1;\n  },\n  [LineCategory.comment]: (text) => {\n    if (/[가-힣]+/.test(text)) {\n      return 2;\n    }\n    return 1;\n  },\n  [LineCategory.separator]: (text) =>\n    isSeparator(text) ? scoreRange.certain : scoreRange.notPossible,\n};\n\nclass Line {\n  inferedCategory: {\n    value: LineCategory;\n    score: number;\n  };\n  constructor(public text: string) {\n    const categories = $enum(LineCategory).getValues();\n    this.inferedCategory = categories.reduce((result, current) => {\n      if (result?.score === scoreRange.certain) {\n        return result;\n      }\n      const checker = categoryScorer[current];\n      const score = checker?.(text);\n      if (score !== undefined && score > (result?.score ?? -1)) {\n        return { value: current, score: score };\n      }\n      return result;\n    }, undefined as { value: LineCategory; score: number } | undefined) ?? {\n      value: LineCategory.unknown,\n      score: 5,\n    };\n  }\n}\n\nexport class LineParser {\n  lines: Line[];\n  private songsCache?: SongParser[];\n  done = false;\n  constructor(text: string) {\n    this.lines = text\n      .trim()\n      .split(\"\\n\")\n      .map(($0) => $0.trim())\n      .reduce((result, current) => {\n        const lastLine = result[result.length - 1] ?? \"\";\n        if (!(current === \"\" && lastLine.text === \"\")) {\n          result.push(new Line(current));\n        }\n        return result;\n      }, [] as Line[]);\n    console.log(\n      this.lines.map(($0) => ({\n        text: $0.text,\n        category: $enum(LineCategory).getKeyOrDefault($0.inferedCategory.value),\n      }))\n    );\n  }\n\n  songs(): SongParser[] {\n    if (this.songsCache) {\n      return this.songsCache;\n    }\n    const songParts = this.getSongParts();\n    const songs: SongPart[][] = [];\n\n    let startIndexOfSong = 0;\n    let processedLineIndex = 0;\n    for (const [currentIndex, currentPart] of Array.from(songParts.entries())) {\n      if (currentIndex <= processedLineIndex) {\n        continue;\n      }\n      if (currentPart.category === LineCategory.separator) {\n        const previousParts = songParts.slice(startIndexOfSong, currentIndex);\n        if (isCompleteSong(previousParts)) {\n          songs.push(previousParts);\n          startIndexOfSong = currentIndex;\n        }\n      } else if (titleSections.includes(currentPart.category)) {\n        const firstBodyIndexAfterThis = songParts\n          .slice(currentIndex)\n          .findIndex(($0) => $0.category === LineCategory.body);\n        if (firstBodyIndexAfterThis === -1) {\n          processedLineIndex = Number.MAX_SAFE_INTEGER;\n        } else {\n          processedLineIndex = firstBodyIndexAfterThis;\n          const categoriesInTitleSection = songParts\n            .slice(currentIndex, currentIndex + firstBodyIndexAfterThis)\n            .map(($0) => $0.category);\n          if (\n            categoriesInTitleSection.includes(LineCategory.title) ||\n            categoriesInTitleSection.includes(LineCategory.flow) ||\n            categoriesInTitleSection.includes(LineCategory.linkUrl)\n          ) {\n            const previousParts = songParts.slice(\n              startIndexOfSong,\n              currentIndex\n            );\n            if (isCompleteSong(previousParts)) {\n              songs.push(previousParts);\n              startIndexOfSong = currentIndex;\n            }\n          }\n        }\n      }\n    }\n    const remainingParts = songParts.slice(startIndexOfSong);\n    if (isCompleteSong(remainingParts)) {\n      songs.push(remainingParts);\n    }\n\n    this.songsCache = songs.map(($0) => new SongParser($0));\n    return this.songsCache;\n  }\n\n  getSongParts(): SongPart[] {\n    const songParts = [] as Optional<SongPart, \"end\" | \"lines\">[];\n    this.lines.forEach((line, index) => {\n      const last = songParts[songParts.length - 1];\n      if (last === undefined) {\n        songParts.push({ start: index, category: line.inferedCategory.value });\n      } else if (last.category !== line.inferedCategory.value) {\n        last.end = index;\n        songParts.push({ start: index, category: line.inferedCategory.value });\n      }\n    });\n    if (songParts[songParts.length - 1]) {\n      songParts[songParts.length - 1].end = this.lines.length;\n    }\n    return songParts.flatMap((part) => {\n      const { start, end, category } = part;\n      if (end === undefined) {\n        return [];\n      }\n      return [\n        {\n          start,\n          end,\n          category,\n          lines: this.lines.slice(start, end).map(($0) => $0.text),\n        },\n      ];\n    });\n  }\n}\n\nfunction isCompleteSong(songParts: SongPart[]): boolean {\n  return songParts.filter(($0) => $0.category === LineCategory.body).length > 0;\n}\n","import { LineParser } from './LineParser'\nimport { Slide, SlideConvertMethod, SongParser } from './SongParser'\n\nfunction convertSlideToFormText(slide: Slide): string {\n  const { tag, body } = slide\n  return [`[[${tag ?? ''}]]`, body || tag].join('\\n')\n}\nfunction convertSongSlidesToFormText(slides: Slide[]): string {\n  return slides.map(convertSlideToFormText).join('\\n---\\n')\n}\n\nexport class LyricParser {\n  lineParser: LineParser\n  songParsers: SongParser[]\n  constructor(text: string) {\n    this.lineParser = new LineParser(text)\n    this.songParsers = this.lineParser.songs()\n  }\n\n  toFormText(method: SlideConvertMethod = SlideConvertMethod.withFlowOrder): string {\n    return this.songParsers\n      .map($0 => {\n        return convertSongSlidesToFormText($0.toSlides(method))\n      })\n      .join('\\n===\\n')\n  }\n}\n","import React, { useRef } from \"react\";\nimport \"./App.css\";\nimport CSRFToken from \"./api/CSRFToken\";\nimport { LyricParser } from \"./parser/LyricParser\";\nimport { format, getDay } from \"date-fns\";\nimport { addDays } from \"date-fns/esm\";\n\nconst actionUrl = \"https://jjmean2.pythonanywhere.com/ppt_create/lyrics\";\n// const actionUrl = \"http://localhost:8000/ppt_create/lyrics\";\n\nconst getFilename = (): string => {\n  const today = new Date();\n  // 0 is Sunday 6 is Saturday\n  const weekday = getDay(today);\n  const distanceToSunday = (7 - weekday) % 7;\n  const nextSunday = addDays(today, distanceToSunday);\n  const sundayText = format(nextSunday, \"yyyy-MM-dd\");\n  return \"테힐라 찬양 \" + sundayText;\n};\n\nfunction App() {\n  const formRef = useRef<HTMLFormElement>(null);\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n  const hiddenBodyRef = useRef<HTMLInputElement>(null);\n  const filenameRef = useRef<HTMLInputElement>(null);\n  const handleButtonClick = (): void => {\n    if (\n      !formRef.current ||\n      !textAreaRef.current ||\n      !hiddenBodyRef.current ||\n      !filenameRef.current\n    ) {\n      return;\n    }\n    const value = textAreaRef.current?.value;\n    if (!value) {\n      return;\n    }\n    const parser = new LyricParser(value);\n    const formText = parser.toFormText();\n    hiddenBodyRef.current.value = formText;\n    filenameRef.current.value = getFilename();\n    console.log(formText);\n    formRef.current.submit();\n  };\n  return (\n    <div className=\"wrapper\">\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <div className=\"container\">\n          <a className=\"navbar-brand\" href=\"{% url 'lyrics' %}\">\n            가사 PPT 생성기\n          </a>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav mr-auto\">\n              <li className=\"nav-item active\">\n                <a className=\"nav-link\" href=\"{% url 'lyrics' %}\">\n                  가사 생성\n                </a>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n      <div className=\"container\">\n        <div className=\"App\">\n          <form\n            id=\"lyrics_form\"\n            name=\"lyrics_form\"\n            ref={formRef}\n            method=\"post\"\n            action={actionUrl}\n          >\n            <CSRFToken />\n            <input ref={hiddenBodyRef} type=\"hidden\" name=\"body\"></input>\n            <input ref={filenameRef} type=\"hidden\" name=\"filename\"></input>\n          </form>\n          <div className=\"page\">\n            <div className=\"button-container\">\n              <button className=\"btn btn-primary\" onClick={handleButtonClick}>\n                제출\n              </button>\n            </div>\n            <textarea\n              className=\"form-control\"\n              ref={textAreaRef}\n              id=\"lyrics\"\n            ></textarea>\n          </div>\n        </div>\n      </div>{\" \"}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}